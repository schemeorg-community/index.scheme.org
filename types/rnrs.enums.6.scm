(((name . "make-enumeration")
  (signature lambda ((list? symbol-list)) enum-set)
  (tags pure))
 ((name . "enum-set-universe")
  (signature lambda ((enum-set enum-set)) enum-set)
  (tags pure))
 ((name . "enum-set-indexer")
  (signature lambda ((enum-set enum-set)) procedure?)
  (subsigs (return (lambda ((symbol? el)) (or #f integer?))))
  (tags pure))
 ((name . "enum-set-constructor")
  (signature lambda ((enum-set enum-set)) procedure?)
  (subsigs (return (lambda ((list? elements)) enum-set)))
  (tags pure))
 ((name . "enum-set-constructor")
  (signature lambda ((enum-set enum-set)) procedure?)
  (subsigs (return (lambda ((list? elements)) enum-set)))
  (tags pure))
 ((name . "enum-set->list")
  (signature lambda ((enum-set enum-set)) list?)
  (tags pure))
 ((name . "enum-set-member?")
  (signature lambda ((symbol? element) (enum-set enum-set)) boolean?)
  (tags pure))
 ((name . "enum-set-subset?")
  (signature lambda ((enum-set set1) (enum-set set2)) boolean?)
  (tags pure))
 ((name . "enum-set=?")
  (signature lambda ((enum-set set1) (enum-set set2)) boolean?)
  (tags pure))
 ((name . "enum-set-union")
  (signature lambda ((enum-set set1) (enum-set set2)) enum-set)
  (tags pure))
 ((name . "enum-set-intersection")
  (signature lambda ((enum-set set1) (enum-set set2)) enum-set)
  (tags pure))
 ((name . "enum-set-difference")
  (signature lambda ((enum-set set1) (enum-set set2)) enum-set)
  (tags pure))
 ((name . "enum-set-complement")
  (signature lambda ((enum-set set)) enum-set)
  (tags pure))
 ((name . "enum-set-projection")
  (signature lambda ((enum-set set1) (enum-set set2)) enum-set)
  (tags pure))
 ((name . "define-enumeration")
  (signature syntax-rules () ((_ type-name (symbol ...) constructor-syntax)))))
