(((name . "string-cursor?")
  (signature lambda (obj) boolean?)
  (tags pure predicate))
 ((name . "string-cursor-start")
  (signature lambda ((string? s)) string-cursor?)
  (tags pure))
 ((name . "string-cursor-end")
  (signature lambda ((string? s)) string-cursor?)
  (tags pure))
 ((name . "string-cursor-next")
  (signature
   lambda
   ((string? s) ((or integer? string-cursor?) cursor))
   string-cursor?)
  (tags pure))
 ((name . "string-cursor-prev")
  (signature
   lambda
   ((string? s) ((or integer? string-cursor?) cursor))
   string-cursor?)
  (tags pure))
 ((name . "string-cursor-forward")
  (signature
   lambda
   ((string? s) ((or integer? string-cursor?) cursor) (integer? nchars))
   string-cursor?)
  (tags pure))
 ((name . "string-cursor-back")
  (signature
   lambda
   ((string? s) ((or integer? string-cursor?) cursor) (integer? nchars))
   string-cursor?)
  (tags pure))
 ((name . "string-cursor=?")
  (signature
   lambda
   (((or integer? string-cursor?) cursor1)
    ((or integer? string-cursor?) cursor2))
   boolean?)
  (tags pure))
 ((name . "string-cursor<?")
  (signature
   lambda
   (((or integer? string-cursor?) cursor1)
    ((or integer? string-cursor?) cursor2))
   boolean?)
  (tags pure))
 ((name . "string-cursor>?")
  (signature
   lambda
   (((or integer? string-cursor?) cursor1)
    ((or integer? string-cursor?) cursor2))
   boolean?)
  (tags pure))
 ((name . "string-cursor<=?")
  (signature
   lambda
   (((or integer? string-cursor?) cursor1)
    ((or integer? string-cursor?) cursor2))
   boolean?)
  (tags pure))
 ((name . "string-cursor>=?")
  (signature
   lambda
   (((or integer? string-cursor?) cursor1)
    ((or integer? string-cursor?) cursor2))
   boolean?)
  (tags pure))
 ((name . "string-cursor-diff")
  (signature
   lambda
   ((string? s)
    ((or integer? string-cursor?) start)
    ((or integer? string-cursor?) end))
   integer?)
  (tags pure))
 ((name . "string-cursor->index")
  (signature lambda ((string? s) (string-cursor? cursor)) integer?)
  (tags pure))
 ((name . "string-index->cursor")
  (signature lambda ((string? s) (integer? index)) string-cursor?)
  (tags pure))
 ((name . "string-null?")
  (signature lambda ((string? s)) boolean?)
  (tags pure))
 ((name . "string-every")
  (signature
   case-lambda
   (((procedure? pred) (string? s)) *)
   (((procedure? pred) (string? s) ((or integer? string-cursor?) start)) *)
   (((procedure? pred)
     (string? s)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    *))
  (subsigs (pred (lambda ((char? c)) *)))
  (tags pure))
 ((name . "string-any")
  (signature
   case-lambda
   (((procedure? pred) (string? s)) *)
   (((procedure? pred) (string? s) ((or integer? string-cursor?) start)) *)
   (((procedure? pred)
     (string? s)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    *))
  (subsigs (pred (lambda ((char? c)) *)))
  (tags pure))
 ((name . "string-tabulate")
  (signature
   case-lambda
   (((procedure? proc) (integer? len)) string?)
   (((procedure? proc) (integer? len)) string?))
  (subsigs (proc (lambda ((integer? index)) char?)))
  (tags pure))
 ((name . "string-unfold")
  (signature
   case-lambda
   (((procedure? stop?) (procedure? mapper) seed) string?)
   (((procedure? stop?) (procedure? mapper) seed (string? base)) string?)
   (((procedure? stop?)
     (procedure? mapper)
     seed
     (string? base)
     (procedure? make-final))
    string?))
  (subsigs
   (stop? (lambda (seed) boolean?))
   (mapper (lambda (seed) char?))
   (make-final (lambda (seed) string?)))
  (tags pure))
 ((name . "string-unfold-right")
  (signature
   case-lambda
   (((procedure? stop?) (procedure? mapper) seed) string?)
   (((procedure? stop?) (procedure? mapper) seed (string? base)) string?)
   (((procedure? stop?)
     (procedure? mapper)
     seed
     (string? base)
     (procedure? make-final))
    string?))
  (subsigs
   (stop? (lambda (seed) boolean?))
   (mapper (lambda (seed) char?))
   (make-final (lambda (seed) string?)))
  (tags pure))
 ((name . "string->list/cursors")
  (signature
   case-lambda
   (((string? s)) list?)
   (((string? s) ((or integer? string-cursor?) start)) list?)
   (((string? s)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    list?))
  (tags pure))
 ((name . "string->vector/cursors")
  (signature
   case-lambda
   (((string? s)) vector?)
   (((string? s) ((or integer? string-cursor?) start)) vector?)
   (((string? s)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    vector?))
  (tags pure))
 ((name . "reverse-list->string")
  (signature lambda ((list? char-list)) string?)
  (tags pure))
 ((name . "string-join")
  (signature
   case-lambda
   (((list? string-list)) string?)
   (((list? string-list) (string? delimiter)) string?)
   (((list? string-list) (string? delimiter) (symbol? grammar)) string?))
  (tags pure)
  (spec-values
   (grammar
    ("'infix"
     "infix or separator grammar: insert the delimiter between list elements. An empty list will produce an empty string -- note, however, that parsing an empty string with an infix or separator grammar is ambiguous. Is it an empty list, or a list of one element, the empty string?")
    ("'strict-infix"
     "same as 'infix, but will raise an error if given an empty list.")
    ("'suffix"
     "suffix or terminator grammar: insert the delimiter after every list element. This grammar has no ambiguities.")
    ("'prefix"
     "prefix grammar: insert the delimiter before every list element. This grammar has no ambiguities."))))
 ((name . "string-ref/cursor")
  (signature lambda ((string? s) ((or integer? string-cursor?) cursor)) char?)
  (tags pure))
 ((name . "substring/cursor")
  (signature
   lambda
   ((string? s)
    ((or integer? string-cursor?) start)
    ((or integer? string-cursor?) end))
   string?)
  (tags pure))
 ((name . "string-copy/cursors")
  (signature
   case-lambda
   (((string? s)) string?)
   (((string? s) ((or integer? string-cursor?) start)) string?)
   (((string? s)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string?))
  (tags pure))
 ((name . "string-take")
  (signature lambda ((string? s) (integer? nchars)) string?)
  (tags pure))
 ((name . "string-drop")
  (signature lambda ((string? s) (integer? nchars)) string?)
  (tags pure))
 ((name . "string-take-right")
  (signature lambda ((string? s) (integer? nchars)) string?)
  (tags pure))
 ((name . "string-drop-right")
  (signature lambda ((string? s) (integer? nchars)) string?)
  (tags pure))
 ((name . "string-pad")
  (signature
   case-lambda
   (((string? s) (integer? len)) string?)
   (((string? s) (integer? len) (char? char)) string?)
   (((string? s)
     (integer? len)
     (char? char)
     ((or integer? string-cursor?) start))
    string?)
   (((string? s)
     (integer? len)
     (char? char)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string?))
  (tags pure))
 ((name . "string-pad-right")
  (signature
   case-lambda
   (((string? s) (integer? len)) string?)
   (((string? s) (integer? len) (char? char)) string?)
   (((string? s)
     (integer? len)
     (char? char)
     ((or integer? string-cursor?) start))
    string?)
   (((string? s)
     (integer? len)
     (char? char)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string?))
  (tags pure))
 ((name . "string-trim")
  (signature
   case-lambda
   (((string? s)) string?)
   (((string? s) (procedure? pred)) string?)
   (((string? s) (procedure? pred) ((or integer? string-cursor?) start))
    string?)
   (((string? s)
     (procedure? pred)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-trim-right")
  (signature
   case-lambda
   (((string? s)) string?)
   (((string? s) (procedure? pred)) string?)
   (((string? s) (procedure? pred) ((or integer? string-cursor?) start))
    string?)
   (((string? s)
     (procedure? pred)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-trim-both")
  (signature
   case-lambda
   (((string? s)) string?)
   (((string? s) (procedure? pred)) string?)
   (((string? s) (procedure? pred) ((or integer? string-cursor?) start))
    string?)
   (((string? s)
     (procedure? pred)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-prefix-length")
  (signature
   case-lambda
   (((string? s1) (string? s2)) integer?)
   (((string? s1) (string? s2) ((or integer? string-cursor?) start1)) integer?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1))
    integer?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2))
    integer?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2)
     ((or integer? string-cursor?) end2))
    integer?))
  (tags pure))
 ((name . "string-suffix-length")
  (signature
   case-lambda
   (((string? s1) (string? s2)) integer?)
   (((string? s1) (string? s2) ((or integer? string-cursor?) start1)) integer?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1))
    integer?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2))
    integer?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2)
     ((or integer? string-cursor?) end2))
    integer?))
  (tags pure))
 ((name . "string-prefix?")
  (signature
   case-lambda
   (((string? s1) (string? s2)) boolean?)
   (((string? s1) (string? s2) ((or integer? string-cursor?) start1)) boolean?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1))
    boolean?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2))
    boolean?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2)
     ((or integer? string-cursor?) end2))
    boolean?))
  (tags pure))
 ((name . "string-suffix?")
  (signature
   case-lambda
   (((string? s1) (string? s2)) boolean?)
   (((string? s1) (string? s2) ((or integer? string-cursor?) start1)) boolean?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1))
    boolean?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2))
    boolean?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2)
     ((or integer? string-cursor?) end2))
    boolean?))
  (tags pure))
 ((name . "string-index")
  (signature
   case-lambda
   (((string? s) (procedure? pred)) string-cursor?)
   (((string? s) (procedure? pred) ((or integer? string-cursor?) start))
    string-cursor?)
   (((string? s)
     (procedure? pred)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string-cursor?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-index-right")
  (signature
   case-lambda
   (((string? s) (procedure? pred)) string-cursor?)
   (((string? s) (procedure? pred) ((or integer? string-cursor?) start))
    string-cursor?)
   (((string? s)
     (procedure? pred)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string-cursor?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-skip")
  (signature
   case-lambda
   (((string? s) (procedure? pred)) string-cursor?)
   (((string? s) (procedure? pred) ((or integer? string-cursor?) start))
    string-cursor?)
   (((string? s)
     (procedure? pred)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string-cursor?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-skip-right")
  (signature
   case-lambda
   (((string? s) (procedure? pred)) string-cursor?)
   (((string? s) (procedure? pred) ((or integer? string-cursor?) start))
    string-cursor?)
   (((string? s)
     (procedure? pred)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string-cursor?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-contains")
  (signature
   case-lambda
   (((string? s1) (string? s2)) (or #f string-cursor?))
   (((string? s1) (string? s2) ((or integer? string-cursor?) start1))
    (or #f string-cursor?))
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1))
    (or #f string-cursor?))
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2))
    (or #f string-cursor?))
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2)
     ((or integer? string-cursor?) end2))
    (or #f string-cursor?)))
  (tags pure))
 ((name . "string-contains-right")
  (signature
   case-lambda
   (((string? s1) (string? s2)) (or #f string-cursor?))
   (((string? s1) (string? s2) ((or integer? string-cursor?) start1))
    (or #f string-cursor?))
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1))
    (or #f string-cursor?))
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2))
    (or #f string-cursor?))
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2)
     ((or integer? string-cursor?) end2))
    (or #f string-cursor?)))
  (tags pure))
 ((name . "string-reverse")
  (signature
   case-lambda
   (((string? s)) string?)
   (((string? s) ((or integer? string-cursor?) start)) string?)
   (((string? s)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string?))
  (tags pure))
 ((name . "string-concatenate")
  (signature lambda ((list? string-list)) string?)
  (tags pure))
 ((name . "string-concatenate-reverse")
  (signature
   case-lambda
   (((list? string-list)) string?)
   (((list? string-list) (string? final-string)) string?)
   (((list? string-list)
     (string? final-string)
     ((or integer? string-cursor?) end))
    string?))
  (tags pure))
 ((name . "string-fold")
  (signature
   case-lambda
   (((procedure? kons) knil (string? s)) *)
   (((procedure? kons) knil (string? s) ((or integer? string-cursor?) start))
    *)
   (((procedure? kons)
     knil
     (string? s)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    *))
  (subsigs (kons (lambda ((char? c) state) *)))
  (tags pure))
 ((name . "string-fold-right")
  (signature
   case-lambda
   (((procedure? kons) knil (string? s)) *)
   (((procedure? kons) knil (string? s) ((or integer? string-cursor?) start))
    *)
   (((procedure? kons)
     knil
     (string? s)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    *))
  (subsigs (kons (lambda ((char? c) state) *)))
  (tags pure))
 ((name . "string-for-each-cursor")
  (signature
   case-lambda
   (((procedure? proc) (string? s)) undefined)
   (((procedure? proc) (string? s) ((or integer? string-cursor?) start))
    undefined)
   (((procedure? proc)
     (string? s)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    undefined))
  (subsigs (proc (lambda ((string-cursor? cursor)) undefined))))
 ((name . "string-replicate")
  (signature
   case-lambda
   (((string? s) (integer? from) (integer? to)) string?)
   (((string? s)
     (integer? from)
     (integer? to)
     ((or integer? string-cursor?) start))
    string?)
   (((string? s)
     (integer? from)
     (integer? to)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string?))
  (tags pure))
 ((name . "string-count")
  (signature
   case-lambda
   (((string? s) (procedure? pred)) integer?)
   (((string? s) (procedure? pred) ((or integer? string-cursor?) start))
    integer?)
   (((string? s)
     (procedure? pred)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    integer?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-replace")
  (signature
   case-lambda
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1))
    string?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2))
    string?)
   (((string? s1)
     (string? s2)
     ((or integer? string-cursor?) start1)
     ((or integer? string-cursor?) end1)
     ((or integer? string-cursor?) start2)
     ((or integer? string-cursor?) end2))
    string?))
  (tags pure))
 ((name . "string-split")
  (signature
   case-lambda
   (((string? s) (string? delimiter)) list?)
   (((string? s) (string? delimiter) (symbol? grammar)) list?)
   (((string? s)
     (string? delimiter)
     (symbol? grammar)
     ((or integer? #f) limit))
    list?)
   (((string? s)
     (string? delimiter)
     (symbol? grammar)
     ((or integer? #f) limit)
     ((or integer? string-cursor?) start))
    list?)
   (((string? s)
     (string? delimiter)
     (symbol? grammar)
     ((or integer? #f) limit)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    list?))
  (tags pure)
  (spec-values
   (grammar
    ("'infix" "empty string produces empty list")
    ("'strict-infix" "empty string signals an error")
    ("'suffix" "leading empty string is suppressed")
    ("'prefix" "trailing empty string is suppressed"))))
 ((name . "string-filter")
  (signature
   case-lambda
   (((procedure? pred) (string? s)) string?)
   (((procedure? pred) (string? s) ((or integer? string-cursor?) start))
    string?)
   (((procedure? pred)
     (string? s)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-remove")
  (signature
   case-lambda
   (((procedure? pred) (string? s)) string?)
   (((procedure? pred) (string? s) ((or integer? string-cursor?) start))
    string?)
   (((procedure? pred)
     (string? s)
     ((or integer? string-cursor?) start)
     ((or integer? string-cursor?) end))
    string?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure)))
