(((name . "text?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes textual?))
 ((name . "textual?") (signature lambda (obj) boolean?) (tags pure predicate))
 ((name . "textual-null?")
  (signature lambda ((textual? textual)) boolean?)
  (tags pure))
 ((name . "textual-every")
  (signature
   case-lambda
   (((procedure? pred) (textual? textual)) *)
   (((procedure? pred) (textual? textual) (integer? start)) *)
   (((procedure? pred) (textual? textual) (integer? start) (integer? end)) *))
  (subsigs (pred (lambda ((char? char)) *)))
  (tags pure))
 ((name . "textual-any")
  (signature
   case-lambda
   (((procedure? pred) (textual? textual)) *)
   (((procedure? pred) (textual? textual) (integer? start)) *)
   (((procedure? pred) (textual? textual) (integer? start) (integer? end)) *))
  (subsigs (pred (lambda ((char? char)) *)))
  (tags pure))
 ((name . "make-text")
  (signature lambda ((integer? len) (char? char)) text?)
  (tags pure))
 ((name . "text") (signature lambda ((char? char) ...) text?) (tags pure))
 ((name . "text-tabulate")
  (signature lambda ((procedure? proc) (integer? len)) text?)
  (subsigs (proc (lambda ((integer? k)) char?)))
  (tags pure))
 ((name . "text-unfold")
  (signature
   case-lambda
   (((procedure? stop?) (procedure? mapper) (procedure? successor) seed) text?)
   (((procedure? stop?)
     (procedure? mapper)
     (procedure? successor)
     seed
     (textual? base))
    text?)
   (((procedure? stop?)
     (procedure? mapper)
     (procedure? successor)
     seed
     (textual? base)
     (procedure? make-final))
    text?))
  (subsigs
   (stop? (lambda (seed) boolean?))
   (mapper (lambda (seed) (or char? string? text?)))
   (success (lambda (seed) *))
   (make-final (lambda (seed) (or char? string? text?))))
  (tags pure))
 ((name . "text-unfold-right")
  (signature
   case-lambda
   (((procedure? stop?) (procedure? mapper) (procedure? successor) seed) text?)
   (((procedure? stop?)
     (procedure? mapper)
     (procedure? successor)
     seed
     (textual? base))
    text?)
   (((procedure? stop?)
     (procedure? mapper)
     (procedure? successor)
     seed
     (textual? base)
     (procedure? make-final))
    text?))
  (subsigs
   (stop? (lambda (seed) boolean?))
   (mapper (lambda (seed) (or char? string? text?)))
   (success (lambda (seed) *))
   (make-final (lambda (seed) (or char? string? text?))))
  (tags pure))
 ((name . "textual->text")
  (signature lambda ((textual? textual)) text?)
  (tags pure))
 ((name . "textual->string")
  (signature
   case-lambda
   (((textual? textual)) string?)
   (((textual? textual) (integer? start)) string?)
   (((textual? textual) (integer? start) (integer? end)) string?))
  (tags pure))
 ((name . "textual->vector")
  (signature
   case-lambda
   (((textual? textual)) vector?)
   (((textual? textual) (integer? start)) vector?)
   (((textual? textual) (integer? start) (integer? end)) vector?))
  (tags pure))
 ((name . "textual->list")
  (signature
   case-lambda
   (((textual? textual)) list?)
   (((textual? textual) (integer? start)) list?)
   (((textual? textual) (integer? start) (integer? end)) list?))
  (tags pure))
 ((name . "string->text")
  (signature
   case-lambda
   (((string? string)) text?)
   (((string? string) (integer? start)) text?)
   (((string? string) (integer? start) (integer? end)) text?))
  (tags pure))
 ((name . "vector->text")
  (signature
   case-lambda
   (((vector? vector)) text?)
   (((vector? vector) (integer? start)) text?)
   (((vector? vector) (integer? start) (integer? end)) text?))
  (tags pure))
 ((name . "list->text")
  (signature
   case-lambda
   (((list? list)) text?)
   (((list? list) (integer? start)) text?)
   (((list? list) (integer? start) (integer? end)) text?))
  (tags pure))
 ((name . "reverse-list->text")
  (signature lambda ((list? char-list)) text?)
  (tags pure))
 ((name . "textual->utf8")
  (signature
   case-lambda
   (((textual? textual)) bytevector?)
   (((textual? textual) (integer? start)) bytevector?)
   (((textual? textual) (integer? start) (integer? end)) bytevector?))
  (tags pure))
 ((name . "utf8->text")
  (signature
   case-lambda
   (((bytevector? bytevector)) text?)
   (((bytevector? bytevector) (integer? start)) text?)
   (((bytevector? bytevector) (integer? start) (integer? end)) text?))
  (tags pure))
 ((name . "textual->utf16")
  (signature
   case-lambda
   (((textual? textual)) bytevector?)
   (((textual? textual) (integer? start)) bytevector?)
   (((textual? textual) (integer? start) (integer? end)) bytevector?))
  (tags pure))
 ((name . "utf16->text")
  (signature
   case-lambda
   (((bytevector? bytevector)) text?)
   (((bytevector? bytevector) (integer? start)) text?)
   (((bytevector? bytevector) (integer? start) (integer? end)) text?))
  (tags pure))
 ((name . "textual->utf16be")
  (signature
   case-lambda
   (((textual? textual)) bytevector?)
   (((textual? textual) (integer? start)) bytevector?)
   (((textual? textual) (integer? start) (integer? end)) bytevector?))
  (tags pure))
 ((name . "utf16be->text")
  (signature
   case-lambda
   (((bytevector? bytevector)) text?)
   (((bytevector? bytevector) (integer? start)) text?)
   (((bytevector? bytevector) (integer? start) (integer? end)) text?))
  (tags pure))
 ((name . "textual->utf16le")
  (signature
   case-lambda
   (((textual? textual)) bytevector?)
   (((textual? textual) (integer? start)) bytevector?)
   (((textual? textual) (integer? start) (integer? end)) bytevector?))
  (tags pure))
 ((name . "utf16le->text")
  (signature
   case-lambda
   (((bytevector? bytevector)) text?)
   (((bytevector? bytevector) (integer? start)) text?)
   (((bytevector? bytevector) (integer? start) (integer? end)) text?))
  (tags pure))
 ((name . "text-length")
  (signature lambda ((text? text)) integer?)
  (tags pure))
 ((name . "text-ref")
  (signature lambda ((text? text) (integer? idx)) char?)
  (tags pure))
 ((name . "textual-length")
  (signature lambda ((textual? textual)) integer?)
  (tags pure))
 ((name . "textual-ref")
  (signature lambda ((textual? text) (integer? idx)) char?)
  (tags pure))
 ((name . "subtext")
  (signature lambda ((text? text) (integer? start) (integer? end)) text?)
  (tags pure))
 ((name . "subtextual")
  (signature lambda ((textual? text) (integer? start) (integer? end)) text?)
  (tags pure))
 ((name . "textual-copy")
  (signature
   case-lambda
   (((textual? textual)) text?)
   (((textual? textual) (integer? start)) text?)
   (((textual? textual) (integer? start) (integer? end)) text?))
  (tags pure))
 ((name . "textual-take")
  (signature lambda ((textual? textual) (integer? nchars)) text?)
  (tags pure))
 ((name . "textual-drop")
  (signature lambda ((textual? textual) (integer? nchars)) text?)
  (tags pure))
 ((name . "textual-take-right")
  (signature lambda ((textual? textual) (integer? nchars)) text?)
  (tags pure))
 ((name . "textual-drop-right")
  (signature lambda ((textual? textual) (integer? nchars)) text?)
  (tags pure))
 ((name . "textual-pad")
  (signature
   case-lambda
   (((textual? textual) (integer? len)) text?)
   (((textual? textual) (integer? len) (char? char)) text?)
   (((textual? textual) (integer? len) (char? char) (integer? start)) text?)
   (((textual? textual)
     (integer? len)
     (char? char)
     (integer? start)
     (integer? end))
    text?))
  (tags pure))
 ((name . "textual-pad-right")
  (signature
   case-lambda
   (((textual? textual) (integer? len)) text?)
   (((textual? textual) (integer? len) (char? char)) text?)
   (((textual? textual) (integer? len) (char? char) (integer? start)) text?)
   (((textual? textual)
     (integer? len)
     (char? char)
     (integer? start)
     (integer? end))
    text?))
  (tags pure))
 ((name . "textual-trim")
  (signature
   case-lambda
   (((textual? textual)) text?)
   (((textual? textual) (procedure? pred)) text?)
   (((textual? textual) (procedure? pred) (integer? start)) text?)
   (((textual? textual) (procedure? pred) (integer? start) (integer? end))
    text?))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "textual-trim-right")
  (signature
   case-lambda
   (((textual? textual)) text?)
   (((textual? textual) (procedure? pred)) text?)
   (((textual? textual) (procedure? pred) (integer? start)) text?)
   (((textual? textual) (procedure? pred) (integer? start) (integer? end))
    text?))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "textual-trim-both")
  (signature
   case-lambda
   (((textual? textual)) text?)
   (((textual? textual) (procedure? pred)) text?)
   (((textual? textual) (procedure? pred) (integer? start)) text?)
   (((textual? textual) (procedure? pred) (integer? start) (integer? end))
    text?))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "textual-replace")
  (signature
   case-lambda
   (((textual? textual1) (textual? textual2) (integer? start1) (integer? end1))
    text?)
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    text?)
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    text?))
  (tags pure))
 ((name . "textual=?")
  (signature
   lambda
   ((textual? textual1) (textual? textual2) (textual? textual3) ...)
   boolean?)
  (tags pure))
 ((name . "textual<?")
  (signature
   lambda
   ((textual? textual1) (textual? textual2) (textual? textual3) ...)
   boolean?)
  (tags pure))
 ((name . "textual>?")
  (signature
   lambda
   ((textual? textual1) (textual? textual2) (textual? textual3) ...)
   boolean?)
  (tags pure))
 ((name . "textual<=?")
  (signature
   lambda
   ((textual? textual1) (textual? textual2) (textual? textual3) ...)
   boolean?)
  (tags pure))
 ((name . "textual>=?")
  (signature
   lambda
   ((textual? textual1) (textual? textual2) (textual? textual3) ...)
   boolean?)
  (tags pure))
 ((name . "textual-ci=?")
  (signature
   lambda
   ((textual? textual1) (textual? textual2) (textual? textual3) ...)
   boolean?)
  (tags pure))
 ((name . "textual-ci<?")
  (signature
   lambda
   ((textual? textual1) (textual? textual2) (textual? textual3) ...)
   boolean?)
  (tags pure))
 ((name . "textual-ci>?")
  (signature
   lambda
   ((textual? textual1) (textual? textual2) (textual? textual3) ...)
   boolean?)
  (tags pure))
 ((name . "textual-ci<=?")
  (signature
   lambda
   ((textual? textual1) (textual? textual2) (textual? textual3) ...)
   boolean?)
  (tags pure))
 ((name . "textual-ci>=?")
  (signature
   lambda
   ((textual? textual1) (textual? textual2) (textual? textual3) ...)
   boolean?)
  (tags pure))
 ((name . "textual-prefix-length")
  (signature
   case-lambda
   (((textual? textual1) (textual? textual2)) integer?)
   (((textual? textual1) (textual? textual2) (integer? start1)) integer?)
   (((textual? textual1) (textual? textual2) (integer? start1) (integer? end1))
    integer?)
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    integer?)
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    integer?))
  (tags pure))
 ((name . "textual-suffix-length")
  (signature
   case-lambda
   (((textual? textual1) (textual? textual2)) integer?)
   (((textual? textual1) (textual? textual2) (integer? start1)) integer?)
   (((textual? textual1) (textual? textual2) (integer? start1) (integer? end1))
    integer?)
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    integer?)
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    integer?))
  (tags pure))
 ((name . "textual-prefix?")
  (signature
   case-lambda
   (((textual? textual1) (textual? textual2)) boolean?)
   (((textual? textual1) (textual? textual2) (integer? start1)) boolean?)
   (((textual? textual1) (textual? textual2) (integer? start1) (integer? end1))
    boolean?)
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    boolean?)
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    boolean?))
  (tags pure))
 ((name . "textual-suffix?")
  (signature
   case-lambda
   (((textual? textual1) (textual? textual2)) boolean?)
   (((textual? textual1) (textual? textual2) (integer? start1)) boolean?)
   (((textual? textual1) (textual? textual2) (integer? start1) (integer? end1))
    boolean?)
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    boolean?)
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    boolean?))
  (tags pure))
 ((name . "textual-index")
  (signature
   case-lambda
   (((textual? textual) (procedure? pred)) (or #f integer?))
   (((textual? textual) (procedure? pred) (integer? start)) (or #f integer?))
   (((textual? textual) (procedure? pred) (integer? start) (integer? end))
    (or #f integer?)))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "textual-index-right")
  (signature
   case-lambda
   (((textual? textual) (procedure? pred)) (or #f integer?))
   (((textual? textual) (procedure? pred) (integer? start)) (or #f integer?))
   (((textual? textual) (procedure? pred) (integer? start) (integer? end))
    (or #f integer?)))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "textual-skip")
  (signature
   case-lambda
   (((textual? textual) (procedure? pred)) (or #f integer?))
   (((textual? textual) (procedure? pred) (integer? start)) (or #f integer?))
   (((textual? textual) (procedure? pred) (integer? start) (integer? end))
    (or #f integer?)))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "textual-skip-right")
  (signature
   case-lambda
   (((textual? textual) (procedure? pred)) (or #f integer?))
   (((textual? textual) (procedure? pred) (integer? start)) (or #f integer?))
   (((textual? textual) (procedure? pred) (integer? start) (integer? end))
    (or #f integer?)))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "textual-contains")
  (signature
   case-lambda
   (((textual? textual1) (textual? textual2)) (or #f integer?))
   (((textual? textual1) (textual? textual2) (integer? start1))
    (or #f integer?))
   (((textual? textual1) (textual? textual2) (integer? start1) (integer? end1))
    (or #f integer?))
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    (or #f integer?))
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    (or #f integer?)))
  (tags pure))
 ((name . "textual-contains-right")
  (signature
   case-lambda
   (((textual? textual1) (textual? textual2)) (or #f integer?))
   (((textual? textual1) (textual? textual2) (integer? start1))
    (or #f integer?))
   (((textual? textual1) (textual? textual2) (integer? start1) (integer? end1))
    (or #f integer?))
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    (or #f integer?))
   (((textual? textual1)
     (textual? textual2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    (or #f integer?)))
  (tags pure))
 ((name . "textual-upcase")
  (signature lambda ((textual? textual)) text?)
  (tags pure))
 ((name . "textual-downcase")
  (signature lambda ((textual? textual)) text?)
  (tags pure))
 ((name . "textual-foldcase")
  (signature lambda ((textual? textual)) text?)
  (tags pure))
 ((name . "textual-titlecase")
  (signature lambda ((textual? textual)) text?)
  (tags pure))
 ((name . "textual-append")
  (signature lambda ((textual? textual) ...) text?)
  (tags pure))
 ((name . "textual-concatenate")
  (signature lambda ((list? textual-list)) text?)
  (tags pure))
 ((name . "textual-concatenate-reverse")
  (signature
   case-lambda
   (((list? textual-list)) text?)
   (((list? textual-list) (textual? final-textual)) text?)
   (((list? textual-list) (textual? final-textual) (integer? end)) text?))
  (tags pure))
 ((name . "textual-join")
  (signature
   case-lambda
   (((list? textual-list)) text?)
   (((list? textual-list) (textual? delimiter)) text?)
   (((list? textual-list) (textual? delimiter) (symbol? grammar)) text?))
  (tags pure)
  (spec-values
   (grammar
    ("'infix"
     "infix or separator grammar: insert the delimiter between list elements. An empty list will produce an empty text.")
    ("'strict-infix"
     "same as 'infix if the textual-list is non-empty, but will signal an error if given an empty list. (This avoids an ambiguity)")
    ("'suffix"
     "suffix or terminator grammar: insert the delimiter after every list element.")
    ("'prefix"
     "prefix grammar: insert the delimiter before every list element."))))
 ((name . "textual-fold")
  (signature
   case-lambda
   (((procedure? kons) knil (textual? textual)) *)
   (((procedure? kons) knil (textual? textual) (integer? start)) *)
   (((procedure? kons) knil (textual? textual) (integer? start) (integer? end))
    *))
  (subsigs (kons (lambda ((char? char) state) *)))
  (tags pure))
 ((name . "textual-fold-right")
  (signature
   case-lambda
   (((procedure? kons) knil (textual? textual)) *)
   (((procedure? kons) knil (textual? textual) (integer? start)) *)
   (((procedure? kons) knil (textual? textual) (integer? start) (integer? end))
    *))
  (subsigs (kons (lambda ((char? char) state) *)))
  (tags pure))
 ((name . "textual-map")
  (signature
   lambda
   ((procedure? proc) (textual? textual1) (textual? textual2) ...)
   text?)
  (subsigs
   (proc (lambda ((char? char1) (char? char2) ...) (or textual? char?))))
  (tags pure))
 ((name . "textual-for-each")
  (signature
   lambda
   ((procedure? proc) (textual? textual1) (textual? textual2) ...)
   undefined)
  (subsigs (proc (lambda ((char? char1) (char? char2) ...) undefined))))
 ((name . "textual-map-index")
  (signature
   case-lambda
   (((procedure? proc) (textual? textual)) text?)
   (((procedure? proc) (textual? textual) (integer? start)) text?)
   (((procedure? proc) (textual? textual) (integer? start) (integer? end))
    text?))
  (subsigs (proc (lambda ((char? char)) (or textual? char?))))
  (tags pure))
 ((name . "textual-for-each-index")
  (signature
   case-lambda
   (((procedure? proc) (textual? textual)) undefined)
   (((procedure? proc) (textual? textual) (integer? start)) undefined)
   (((procedure? proc) (textual? textual) (integer? start) (integer? end))
    undefined))
  (subsigs (proc (lambda ((char? char)) undefined))))
 ((name . "textual-count")
  (signature
   case-lambda
   (((textual? textual) (procedure? pred)) integer?)
   (((textual? textual) (procedure? pred) (integer? start)) integer?)
   (((textual? textual) (procedure? pred) (integer? start) (integer? end))
    integer?))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "textual-filter")
  (signature
   case-lambda
   (((procedure? pred) (textual? textual)) text?)
   (((procedure? pred) (textual? textual) (integer? start)) text?)
   (((procedure? pred) (textual? textual) (integer? start) (integer? end))
    text?))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "textual-remove")
  (signature
   case-lambda
   (((procedure? pred) (textual? textual)) text?)
   (((procedure? pred) (textual? textual) (integer? start)) text?)
   (((procedure? pred) (textual? textual) (integer? start) (integer? end))
    text?))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "textual-replicate")
  (signature
   case-lambda
   (((textual? textual) (integer? from) (integer? to)) text?)
   (((textual? textual) (integer? from) (integer? to) (integer? start)) text?)
   (((textual? textual)
     (integer? from)
     (integer? to)
     (integer? start)
     (integer? end))
    text?))
  (tags pure))
 ((name . "textual-split")
  (signature
   case-lambda
   (((textual? textual) (textual? delimiter)) list?)
   (((textual? textual) (textual? delimiter) (symbol? grammar)) list?)
   (((textual? textual)
     (textual? delimiter)
     (symbol? grammar)
     ((or #f integer?) limit))
    list?)
   (((textual? textual)
     (textual? delimiter)
     (symbol? grammar)
     ((or #f integer?) limit)
     (integer? start))
    list?)
   (((textual? textual)
     (textual? delimiter)
     (symbol? grammar)
     ((or #f integer?) limit)
     (integer? start)
     (integer? end))
    list?))
  (tags pure)
  (spec-values
   (grammar
    ("'infix" "empty textual produces empty list")
    ("'strict-infix" "empty textual signals an error")
    ("'suffix" "leading empty text is suppressed")
    ("'prefix" "trailing empty text is suppressed")))))
