(((name . "cons") (signature lambda (a d) pair?) (tags pure))
 ((name . "list") (signature lambda (object ...) list?) (tags pure))
 ((name . "xcons") (signature lambda (d a) pair?) (tags pure))
 ((name . "cons*") (signature lambda (elt1 elt2 ...) *))
 ((name . "make-list")
  (signature case-lambda (((integer? n)) list?) (((integer? n) fill) list?))
  (tags pure))
 ((name . "list-tabulate")
  (signature lambda ((integer? n) (procedure? init-proc)) list?)
  (subsigs (init-proc (lambda ((integer? i)) *)))
  (tags pure))
 ((name . "list-copy")
  (signature
   case-lambda
   (((list? flist)) list?)
   (((dotted-list? flist)) dotted-list?))
  (tags pure))
 ((name . "circular-list")
  (signature lambda (elt1 elt2 ...) circular-list?)
  (tags pure))
 ((name . "iota")
  (signature
   case-lambda
   (((integer? count)) list?)
   (((integer? count) (number? start)) list?)
   (((integer? count) (number? start) (number? step)) list?))
  (tags pure))
 ((name . "proper-list?")
  (signature lambda (obj) boolean?)
  (tags pure predicate))
 ((name . "circular-list?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes pair?))
 ((name . "dotted-list?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes pair?))
 ((name . "pair?") (signature lambda (obj) boolean?) (tags pure predicate))
 ((name . "null?") (signature lambda (obj) boolean?) (tags pure predicate))
 ((name . "null-list?")
  (signature
   case-lambda
   (((list? lst)) boolean?)
   (((circular-list? lst)) boolean?))
  (tags pure predicate))
 ((name . "not-pair?") (signature lambda (obj) boolean?) (tags pure predicate))
 ((name . "list=")
  (signature lambda ((procedure? elt=) (list? list1) ...) boolean?)
  (subsigs (elt= (lambda (a b) *)))
  (tags pure))
 ((name . "caar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cadr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "car") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cdar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cddr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cdr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "caaaar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "caaadr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "caaar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "caadar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "caaddr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "caadr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cadaar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cadadr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cadar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "caddar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cadddr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "caddr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cdaaar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cdaadr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cdaar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cdadar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cdaddr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cdadr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cddaar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cddadr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cddar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cdddar") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cddddr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "cdddr") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "list-ref")
  (signature
   case-lambda
   (((list? clist) (integer? i)) *)
   (((circular-list? clist) (integer? i)) *))
  (tags pure))
 ((name . "first") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "second") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "third") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "fourth") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "fifth") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "sixth") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "seventh") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "eighth") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "ninth") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "tenth") (signature lambda ((pair? pair)) *) (tags pure))
 ((name . "car+cdr")
  (signature lambda ((pair? pair)) (values * *))
  (tags pure))
 ((name . "take")
  (signature
   case-lambda
   (((list? x) (integer? i)) list?)
   (((circular-list? x) (integer? i)) list?)
   (((dotted-list? x) (integer? i)) list?))
  (tags pure))
 ((name . "drop")
  (signature
   case-lambda
   (((list? x) (integer? i)) list?)
   (((circular-list? x) (integer? i)) circular-list?)
   (((dotted-list? x) (integer? i)) *))
  (tags pure))
 ((name . "take-right")
  (signature
   case-lambda
   (((list? flist) (integer? i)) list?)
   (((dotted-list? flist) (integer? i)) *))
  (tags pure))
 ((name . "drop-right")
  (signature
   case-lambda
   (((list? flist) (integer? i)) list?)
   (((dotted-list? flist) (integer? i)) list?))
  (tags pure))
 ((name . "take!")
  (signature
   case-lambda
   (((list? x) (integer? i)) list?)
   (((circular-list? x) (integer? i)) list?)
   (((dotted-list? x) (integer? i)) list?)))
 ((name . "drop-right!")
  (signature
   case-lambda
   (((list? flist) (integer? i)) list?)
   (((dotted-list? flist) (integer? i)) list?)))
 ((name . "split-at")
  (signature
   case-lambda
   (((list? x) (integer? i)) (values list? list?))
   (((circular-list? x) (integer? i)) (values list? circular-list?))
   (((dotted-list? x) (integer? i)) (values list? *)))
  (tags pure))
 ((name . "split-at!")
  (signature
   case-lambda
   (((list? x) (integer? i)) (values list? list?))
   (((circular-list? x) (integer? i)) (values list? circular-list?))
   (((dotted-list? x) (integer? i)) (values list? *))))
 ((name . "last") (signature lambda ((list? pair)) *) (tags pure))
 ((name . "last-pair") (signature lambda ((list? pair)) pair?) (tags pure))
 ((name . "length") (signature lambda ((list? list)) integer?) (tags pure))
 ((name . "length+")
  (signature
   case-lambda
   (((list? clist)) integer?)
   (((circular-list? clist)) boolean?))
  (tags pure))
 ((name . "append")
  (signature case-lambda (((list? list) ...) list?) (((list? list) ... obj) *))
  (tags pure))
 ((name . "append!")
  (signature
   case-lambda
   (((list? list) ...) list?)
   (((list? list) ... obj) *)))
 ((name . "concatenate")
  (signature lambda ((list? list-of-lists)) *)
  (tags pure))
 ((name . "concatenate!") (signature lambda ((list? list-of-lists)) *))
 ((name . "reverse") (signature lambda ((list? list)) list?) (tags pure))
 ((name . "reverse!") (signature lambda ((list? list)) list?))
 ((name . "append-reverse")
  (signature
   case-lambda
   (((list? rev-head) (list? tail)) list?)
   (((list? rev-head) tail) *))
  (tags pure))
 ((name . "append-reverse!")
  (signature
   case-lambda
   (((list? rev-head) (list? tail)) list?)
   (((list? rev-head) tail) *)))
 ((name . "zip")
  (signature lambda ((list? clist1) (list? clist2) ...) list?)
  (tags pure))
 ((name . "unzip1") (signature lambda ((list? list)) list?) (tags pure))
 ((name . "unzip2")
  (signature lambda ((list? list)) (values list? list?))
  (tags pure))
 ((name . "unzip3")
  (signature lambda ((list? list)) (values list? list? list?))
  (tags pure))
 ((name . "unzip4")
  (signature lambda ((list? list)) (values list? list? list? list?))
  (tags pure))
 ((name . "unzip5")
  (signature lambda ((list? list)) (values list? list? list? list? list?))
  (tags pure))
 ((name . "count")
  (signature
   lambda
   ((procedure? pred) (list? clist1) (list? clist2) ...)
   integer?)
  (subsigs (pred (lambda (obj ...) *)))
  (tags pure))
 ((name . "fold")
  (signature
   lambda
   ((procedure? kons) knil (list? clist1) (list? clist2) ...)
   *)
  (subsigs (kons (lambda (obj1 obj2 ... fold-state) *)))
  (tags pure))
 ((name . "fold-right")
  (signature
   lambda
   ((procedure? kons) knil (list? clist1) (list? clist2) ...)
   *)
  (subsigs (kons (lambda (obj1 obj2 ... fold-state) *)))
  (tags pure))
 ((name . "pair-fold")
  (signature
   lambda
   ((procedure? kons) knil (list? clist1) (list? clist2) ...)
   *)
  (subsigs (kons (lambda ((pair? pair1) (pair? pair2) ... fold-state) *)))
  (tags pure))
 ((name . "pair-fold-right")
  (signature
   lambda
   ((procedure? kons) knil (list? clist1) (list? clist2) ...)
   *)
  (subsigs (kons (lambda ((pair? pair1) (pair? pair2) ... fold-state) *)))
  (tags pure))
 ((name . "reduce")
  (signature lambda ((procedure? f) ridentity (list? list)) *)
  (subsigs (f (lambda (obj fold-state) *)))
  (tags pure))
 ((name . "reduce-right")
  (signature lambda ((procedure? f) ridentity (list? list)) *)
  (subsigs (f (lambda (obj fold-state) *)))
  (tags pure))
 ((name . "unfold")
  (signature
   case-lambda
   (((procedure? p) (procedure? f) (procedure? g) seed) list?)
   (((procedure? p) (procedure? f) (procedure? g) seed (list? tail-gen)) *))
  (subsigs
   (p (lambda (seed) boolean?))
   (f (lambda (seed) *))
   (g (lambda (seed) *))
   (tail-gen (lambda () *)))
  (tags pure))
 ((name . "unfold-right")
  (signature
   case-lambda
   (((procedure? p) (procedure? f) (procedure? g) seed) list?)
   (((procedure? p) (procedure? f) (procedure? g) seed (list? tail-gen)) *))
  (subsigs
   (p (lambda (seed) boolean?))
   (f (lambda (seed) *))
   (g (lambda (seed) *))
   (tail-gen (lambda () *)))
  (tags pure))
 ((name . "map")
  (signature lambda ((procedure? proc) (list? list1) (list? list2) ...) list?)
  (subsigs (proc (lambda (obj1 obj2 ...) *)))
  (tags pure))
 ((name . "for-each")
  (signature
   lambda
   ((procedure? proc) (list? list1) (list? list2) ...)
   undefined)
  (subsigs (proc (lambda (obj1 obj2 ...) undefined))))
 ((name . "append-map")
  (signature lambda ((procedure? proc) (list? list1) (list? list2) ...) list?)
  (subsigs (proc (lambda (obj1 obj2 ...) list?)))
  (tags pure))
 ((name . "append-map!")
  (signature lambda ((procedure? proc) (list? list1) (list? list2) ...) list?)
  (subsigs (proc (lambda (obj1 objs2 ...) list?))))
 ((name . "map!")
  (signature lambda ((procedure? proc) (list? list1) (list? list2) ...) list?)
  (subsigs (proc (lambda (obj1 obj2 ...) *))))
 ((name . "map-in-order")
  (signature lambda ((procedure? proc) (list? list1) (list? list2) ...) list?)
  (subsigs (proc (lambda (obj1 obj2 ...) *))))
 ((name . "pair-for-each")
  (signature
   lambda
   ((procedure? proc) (list? list1) (list? list2) ...)
   undefined)
  (subsigs (proc (lambda ((pair? obj1) (pair? obj2) ...) undefined))))
 ((name . "filter-map")
  (signature lambda ((procedure? proc) (list? list1) (list? list2) ...) list?)
  (subsigs (proc (lambda (obj1 obj2 ...) *)))
  (tags pure))
 ((name . "filter")
  (signature lambda ((procedure? pred) (list? list)) list?)
  (subsigs (pred (lambda (obj) *)))
  (tags pure))
 ((name . "filter!")
  (signature lambda ((procedure? pred) (list? list)) list?)
  (subsigs (pred (lambda (obj) *))))
 ((name . "partition")
  (signature lambda ((procedure? pred) (list? list)) (values list? list?))
  (subsigs (pred (lambda (obj) *)))
  (tags pure))
 ((name . "partition!")
  (signature lambda ((procedure? pred) (list? list)) (values list? list?))
  (subsigs (pred (lambda (obj) *))))
 ((name . "remove")
  (signature lambda ((procedure? pred) (list? list)) list?)
  (subsigs (pred (lambda (obj) *)))
  (tags pure))
 ((name . "remove!")
  (signature lambda ((procedure? pred) (list? list)) list?)
  (subsigs (pred (lambda (obj) *))))
 ((name . "find")
  (signature lambda ((procedure? pred) (list? list)) *)
  (subsigs (pred (lambda (obj) *)))
  (tags pure))
 ((name . "find-tail")
  (signature lambda ((procedure? pred) (list? list)) (or pair? #f))
  (subsigs (pred (lambda (obj) *)))
  (tags pure))
 ((name . "take-while")
  (signature lambda ((procedure? pred) (list? list)) list?)
  (subsigs (pred (lambda (obj) *)))
  (tags pure))
 ((name . "take-while!")
  (signature lambda ((procedure? pred) (list? list)) list?)
  (subsigs (pred (lambda (obj) *))))
 ((name . "drop-while")
  (signature
   case-lambda
   (((procedure? pred) (list? list)) list?)
   (((procedure? pred) (circular-list? list)) circular-list?))
  (subsigs (pred (lambda (obj) *)))
  (tags pure))
 ((name . "span")
  (signature
   case-lambda
   (((procedure? pred) (list? list)) (values list? list?))
   (((procedure? pred) (circular-list? list)) (values list? circular-list?)))
  (subsigs (pred (lambda (obj) *)))
  (tags pure))
 ((name . "span!")
  (signature lambda ((procedure? pred) (list? list)) (values list? list?))
  (subsigs (pred (lambda (obj) *))))
 ((name . "break")
  (signature
   case-lambda
   (((procedure? pred) (list? list)) (values list? list?))
   (((procedure? pred) (circular-list? list)) (values list? circular-list?)))
  (subsigs (pred (lambda (obj) *)))
  (tags pure))
 ((name . "break!")
  (signature lambda ((procedure? pred) (list? list)) (values list? list?))
  (subsigs (pred (lambda (obj) *))))
 ((name . "any")
  (signature lambda ((procedure? pred) (list? clist1) (list? clist2) ...) *)
  (subsigs (pred (lambda (obj1 obj2 ...) *)))
  (tags pure))
 ((name . "every")
  (signature lambda ((procedure? pred) (list? clist1) (list? clist2) ...) *)
  (subsigs (pred (lambda (obj1 obj2 ...) *)))
  (tags pure))
 ((name . "list-index")
  (signature
   lambda
   ((procedure? pred) (list? clist1) (list? clist2) ...)
   (or integer? #f))
  (subsigs (pred (lambda (obj1 obj2 ...) *)))
  (tags pure))
 ((name . "member")
  (signature
   case-lambda
   ((obj (list? list)) (or #f list?))
   ((obj (list? list) (procedure? =)) (or #f list?)))
  (subsigs (= (lambda (obj1 obj2) *)))
  (tags pure))
 ((name . "memq")
  (signature lambda (obj (list? list)) (or #f list?))
  (tags pure))
 ((name . "memv")
  (signature lambda (obj (list? list)) (or #f list?))
  (tags pure))
 ((name . "delete")
  (signature
   case-lambda
   ((obj (list? list)) list?)
   ((obj (list? list) (procedure? =)) list?))
  (subsigs (= (lambda (obj1 obj2) *)))
  (tags pure))
 ((name . "delete!")
  (signature
   case-lambda
   ((obj (list? list)) list?)
   ((obj (list? list) (procedure? =)) list?))
  (subsigs (= (lambda (obj1 obj2) *))))
 ((name . "delete-duplicates")
  (signature
   case-lambda
   (((list? list)) list?)
   (((list? list) (procedure? =)) list?))
  (subsigs (= (lambda (obj1 obj2) *)))
  (tags pure))
 ((name . "delete-duplicates!")
  (signature
   case-lambda
   (((list? list)) list?)
   (((list? list) (procedure? =)) list?))
  (subsigs (= (lambda (obj1 obj2) *))))
 ((name . "assoc")
  (signature
   case-lambda
   ((obj (list? alist)) (or list? #f))
   ((obj (list? alist) (procedure? =)) (or pair? #f)))
  (subsigs (= (lambda (a b) *)))
  (tags pure))
 ((name . "assq")
  (signature lambda (obj (list? alist)) (or pair? #f))
  (tags pure))
 ((name . "assv")
  (signature lambda (obj (list? alist)) (or pair? #f))
  (tags pure))
 ((name . "alist-cons")
  (signature lambda (key datum (list? alist)) list?)
  (tags pure))
 ((name . "alist-copy") (signature lambda ((list? alist)) list?) (tags pure))
 ((name . "alist-delete")
  (signature
   case-lambda
   ((key (list? alist)) list?)
   ((key (list? alist) (procedure? =)) list?))
  (subsigs (= (lambda (a b) *)))
  (tags pure))
 ((name . "alist-delete!")
  (signature
   case-lambda
   ((key (list? alist)) list?)
   ((key (list? alist) (procedure? =)) list?))
  (subsigs (= (lambda (a b) *))))
 ((name . "lset<=")
  (signature lambda ((procedure? =) (list? list1) ...) boolean?)
  (subsigs (= (lambda (a b) *)))
  (tags pure))
 ((name . "lset=")
  (signature lambda ((procedure? =) (list? list1) (list? list2) ...) boolean?)
  (subsigs (= (lambda (a b) *)))
  (tags pure))
 ((name . "lset-adjoin")
  (signature lambda ((procedure? =) (list? list) elt1 ...) list?)
  (subsigs (= (lambda (a b) *)))
  (tags pure))
 ((name . "lset-union")
  (signature lambda ((procedure? =) (list? list1) ...) list?)
  (subsigs (= (lambda (a b) *)))
  (tags pure))
 ((name . "lset-union!")
  (signature lambda ((procedure? =) (list? list1) ...) list?)
  (subsigs (= (lambda (a b) *))))
 ((name . "lset-intersection")
  (signature lambda ((procedure? =) (list? list1) (list? list2) ...) list?)
  (subsigs (= (lambda (a b) *)))
  (tags pure))
 ((name . "lset-intersection!")
  (signature lambda ((procedure? =) (list? list1) (list? list2) ...) list?)
  (subsigs (= (lambda (a b) *))))
 ((name . "lset-difference")
  (signature lambda ((procedure? =) (list? list1) (list? list2) ...) list?)
  (subsigs (= (lambda (a b) *)))
  (tags pure))
 ((name . "lset-difference!")
  (signature lambda ((procedure? =) (list? list1) (list? list2) ...) list?)
  (subsigs (= (lambda (a b) *))))
 ((name . "lset-xor")
  (signature lambda ((procedure? =) (list? list1) ...) list?)
  (subsigs (= (lambda (a b) *)))
  (tags pure))
 ((name . "lset-xor!")
  (signature lambda ((procedure? =) (list? list1) ...) list?)
  (subsigs (= (lambda (a b) *))))
 ((name . "lset-diff+intersection")
  (signature
   lambda
   ((procedure? =) (list? list1) (list? list2) ...)
   (values list? list?))
  (subsigs (= (lambda (a b) *)))
  (tags pure))
 ((name . "lset-diff+intersection!")
  (signature
   lambda
   ((procedure? =) (list? list1) (list? list2) ...)
   (values list? list?))
  (subsigs (= (lambda (a b) *))))
 ((name . "set-car!") (signature lambda ((pair? pair) object) undefined))
 ((name . "set-cdr!") (signature lambda ((pair? pair) object) undefined)))
