(((name . "list-sorted?")
  (signature lambda ((procedure? <) (list? lis)) boolean?)
  (subsigs (< (lambda (obj1 obj2) boolean?)))
  (tags pure))
 ((name . "vector-sorted?")
  (signature
   case-lambda
   (((procedure? <) (vector? v)) boolean?)
   (((procedure? <) (vector? v) (integer? start)) boolean?)
   (((procedure? <) (vector? v) (integer? start) (integer? end)) boolean?))
  (subsigs (< (lambda (obj1 obj2) boolean?)))
  (tags pure))
 ((name . "list-sort")
  (signature lambda ((procedure? <) (list? lis)) list?)
  (subsigs (< (lambda (obj1 obj2) boolean?)))
  (tags pure))
 ((name . "list-stable-sort")
  (signature lambda ((procedure? <) (list? lis)) list?)
  (subsigs (< (lambda (obj1 obj2) boolean?)))
  (tags pure))
 ((name . "list-sort!")
  (signature lambda ((procedure? <) (list? lis)) list?)
  (subsigs (< (lambda (obj1 obj2) boolean?))))
 ((name . "list-stable-sort!")
  (signature lambda ((procedure? <) (list? lis)) list?)
  (subsigs (< (lambda (obj1 obj2) boolean?))))
 ((name . "vector-sort")
  (signature
   case-lambda
   (((procedure? <) (vector? v)) boolean?)
   (((procedure? <) (vector? v) (integer? start)) boolean?)
   (((procedure? <) (vector? v) (integer? start) (integer? end)) boolean?))
  (subsigs (< (lambda (obj1 obj2) boolean?)))
  (tags pure))
 ((name . "vector-stable-sort")
  (signature
   case-lambda
   (((procedure? <) (vector? v)) boolean?)
   (((procedure? <) (vector? v) (integer? start)) boolean?)
   (((procedure? <) (vector? v) (integer? start) (integer? end)) boolean?))
  (subsigs (< (lambda (obj1 obj2) boolean?)))
  (tags pure))
 ((name . "vector-sort!")
  (signature
   case-lambda
   (((procedure? <) (vector? v)) boolean?)
   (((procedure? <) (vector? v) (integer? start)) boolean?)
   (((procedure? <) (vector? v) (integer? start) (integer? end)) boolean?))
  (subsigs (< (lambda (obj1 obj2) boolean?))))
 ((name . "vector-stable-sort!")
  (signature
   case-lambda
   (((procedure? <) (vector? v)) boolean?)
   (((procedure? <) (vector? v) (integer? start)) boolean?)
   (((procedure? <) (vector? v) (integer? start) (integer? end)) boolean?))
  (subsigs (< (lambda (obj1 obj2) boolean?))))
 ((name . "list-merge")
  (signature lambda ((procedure? <) (list? lis1) (list? lis2)) list?)
  (subsigs (< (lambda (obj1 obj2) boolean?)))
  (tags pure))
 ((name . "list-merge!")
  (signature lambda ((procedure? <) (list? lis1) (list? lis2)) list?)
  (subsigs (< (lambda (obj1 obj2) boolean?))))
 ((name . "vector-merge")
  (signature
   case-lambda
   (((procedure? <) (vector? v1) (vector? v2)) vector?)
   (((procedure? <) (vector? v1) (vector? v2) (integer? start1)) vector?)
   (((procedure? <)
     (vector? v1)
     (vector? v2)
     (integer? start1)
     (integer? end1))
    vector?)
   (((procedure? <)
     (vector? v1)
     (vector? v2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    vector?)
   (((procedure? <)
     (vector? v1)
     (vector? v2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    vector?))
  (subsigs (< (lambda (obj1 obj2) boolean?)))
  (tags pure))
 ((name . "vector-merge!")
  (signature
   case-lambda
   (((procedure? <) (vector? v1) (vector? v2)) vector?)
   (((procedure? <) (vector? v1) (vector? v2) (integer? start1)) vector?)
   (((procedure? <)
     (vector? v1)
     (vector? v2)
     (integer? start1)
     (integer? end1))
    vector?)
   (((procedure? <)
     (vector? v1)
     (vector? v2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    vector?)
   (((procedure? <)
     (vector? v1)
     (vector? v2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    vector?))
  (subsigs (< (lambda (obj1 obj2) boolean?))))
 ((name . "list-delete-neighbor-dups")
  (signature lambda ((procedure? =) (list? lis)) list?)
  (subsigs (= (lambda (obj1 obj2) boolean?)))
  (tags pure))
 ((name . "list-delete-neighbor-dups!")
  (signature lambda ((procedure? =) (list? lis)) list?)
  (subsigs (= (lambda (obj1 obj2) boolean?))))
 ((name . "vector-delete-neighbor-dups")
  (signature
   case-lambda
   (((procedure? =) (vector? v)) vector?)
   (((procedure? =) (vector? v) (integer? start)) vector?)
   (((procedure? =) (vector? v) (integer? start) (integer? end)) vector?))
  (subsigs (= (lambda (obj1 obj2) boolean?)))
  (tags pure))
 ((name . "vector-delete-neighbor-dups!")
  (signature
   case-lambda
   (((procedure? =) (vector? v)) vector?)
   (((procedure? =) (vector? v) (integer? start)) vector?)
   (((procedure? =) (vector? v) (integer? start) (integer? end)) vector?))
  (subsigs (= (lambda (obj1 obj2) boolean?))))
 ((name . "vector-find-median")
  (signature
   case-lambda
   (((procedure? <) (vector? v) knil) *)
   (((procedure? <) (vector? v) knil (procedure? mean)) *))
  (subsigs (< (lambda (obj1 obj2) boolean?)) (mean (lambda (obj1 obj2) *)))
  (tags pure))
 ((name . "vector-find-median!")
  (signature
   case-lambda
   (((procedure? <) (vector? v) knil) *)
   (((procedure? <) (vector? v) knil (procedure? mean)) *))
  (subsigs (< (lambda (obj1 obj2) boolean?)) (mean (lambda (obj1 obj2) *))))
 ((name . "vector-select!")
  (signature
   case-lambda
   (((procedure? <) (vector? v) (integer? k)) *)
   (((procedure? <) (vector? v) (integer? k) (integer? start)) *)
   (((procedure? <) (vector? v) (integer? k) (integer? start) (integer? end))
    *))
  (subsigs (< (lambda (obj1 obj2) boolean?))))
 ((name . "vector-separate!")
  (signature
   case-lambda
   (((procedure? <) (vector? v) (integer? k)) undefined)
   (((procedure? <) (vector? v) (integer? k) (integer? start)) undefined)
   (((procedure? <) (vector? v) (integer? k) (integer? start) (integer? end))
    undefined))
  (subsigs (< (lambda (obj1 obj2) boolean?)))))
