(((name . "mapping")
  (signature lambda ((comparator? comparator) arg ...) mapping?)
  (tags pure))
 ((name . "mapping-unfold")
  (signature
   lambda
   ((procedure? stop?)
    (procedure? mapper)
    (procedure? successor)
    seed
    (comparator? comparator))
   mapping?)
  (subsigs
   (stop? (lambda (seed) boolean?))
   (mapper (lambda (seed) (values * *)))
   (successor (lambda (seed) *)))
  (tags pure))
 ((name . "mapping?") (signature lambda (obj) boolean?) (tags pure predicate))
 ((name . "mapping-contains?")
  (signature lambda ((mapping? mapping) key) boolean?)
  (tags pure))
 ((name . "mapping-empty?")
  (signature lambda ((mapping? mapping)) boolean?)
  (tags pure))
 ((name . "mapping-disjoint?")
  (signature lambda ((mapping? mapping1) (mapping? mapping2)) boolean?)
  (tags pure))
 ((name . "mapping-ref")
  (signature
   case-lambda
   (((mapping? mapping) key) *)
   (((mapping? mapping) key (procedure? failure)) *)
   (((mapping? mapping) key (procedure? failure) (procedure? success)) *))
  (subsigs (failure (lambda () *)) (success (lambda (value) *)))
  (tags pure))
 ((name . "mapping-ref/default")
  (signature lambda ((mapping? mapping) key default) *)
  (tags pure))
 ((name . "mapping-key-comparator")
  (signature lambda ((mapping? mapping)) comparator?)
  (tags pure))
 ((name . "mapping-adjoin")
  (signature lambda ((mapping? mapping) key1 value1 ...) mapping?)
  (tags pure))
 ((name . "mapping-adjoin!")
  (signature lambda ((mapping? mapping) key1 value1 ...) mapping?))
 ((name . "mapping-set")
  (signature lambda ((mapping? mapping) key1 value1 ...) mapping?)
  (tags pure))
 ((name . "mapping-set!")
  (signature lambda ((mapping? mapping) key1 value1 ...) mapping?))
 ((name . "mapping-replace")
  (signature lambda ((mapping? mapping) key value) mapping?)
  (tags pure))
 ((name . "mapping-replace!")
  (signature lambda ((mapping? mapping) key value) mapping?))
 ((name . "mapping-delete")
  (signature lambda ((mapping? mapping) key ...) mapping?)
  (tags pure))
 ((name . "mapping-delete!")
  (signature lambda ((mapping? mapping) key ...) mapping?)
  (tags pure))
 ((name . "mapping-delete-all")
  (signature lambda ((mapping? mapping) (list? keys)) mapping?)
  (tags pure))
 ((name . "mapping-delete-all!")
  (signature lambda ((mapping? mapping) (list? keys)) mapping?))
 ((name . "mapping-intern")
  (signature
   lambda
   ((mapping? mapping) key (procedure? failure))
   (values mapping? *))
  (subsigs (failure (lambda () *)))
  (tags pure))
 ((name . "mapping-intern!")
  (signature
   lambda
   ((mapping? mapping) key (procedure? failure))
   (values mapping? *))
  (subsigs (failure (lambda () *))))
 ((name . "mapping-update")
  (signature
   case-lambda
   (((mapping? mapping) key (procedure? updater)) mapping?)
   (((mapping? mapping) key (procedure? updater) (procedure? failure))
    mapping?)
   (((mapping? mapping)
     key
     (procedure? updater)
     (procedure? failure)
     (procedure? success))
    mapping?))
  (subsigs
   (updater (lambda (value) *))
   (failure (lambda () *))
   (success (lambda (value) *)))
  (tags pure))
 ((name . "mapping-update!")
  (signature
   case-lambda
   (((mapping? mapping) key (procedure? updater)) mapping?)
   (((mapping? mapping) key (procedure? updater) (procedure? failure))
    mapping?)
   (((mapping? mapping)
     key
     (procedure? updater)
     (procedure? failure)
     (procedure? success))
    mapping?))
  (subsigs
   (updater (lambda (value) *))
   (failure (lambda () *))
   (success (lambda (value) *))))
 ((name . "mapping-update/default")
  (signature
   lambda
   ((mapping? mapping) key (procedure? updater) default)
   mapping?)
  (subsigs (updater (lambda (value) *)))
  (tags pure))
 ((name . "mapping-update!/default")
  (signature
   lambda
   ((mapping? mapping) key (procedure? updater) default)
   mapping?)
  (subsigs (updater (lambda (value) *))))
 ((name . "mapping-pop")
  (signature
   case-lambda
   (((mapping? mapping)) (values mapping? * *))
   (((mapping? mapping) (procedure? failure)) (values mapping? * *)))
  (subsigs (failure (lambda () (values mapping? * *))))
  (tags pure))
 ((name . "mapping-pop!")
  (signature
   case-lambda
   (((mapping? mapping)) (values mapping? * *))
   (((mapping? mapping) (procedure? failure)) (values mapping? * *)))
  (subsigs (failure (lambda () (values mapping? * *)))))
 ((name . "mapping-search")
  (signature
   lambda
   ((mapping? mapping) key (procedure? failure) (procedure? success))
   (values mapping? *))
  (subsigs
   (failure (lambda ((procedure? insert) (procedure? ignore)) *))
   (insert (lambda (value obj) *))
   (ignore (lambda (obj) *))
   (success (lambda (key value (procedure? update) (procedure? remove)) *))
   (update (lambda (new-key new-value obj) *))
   (remove (lambda (obj) *)))
  (tags pure))
 ((name . "mapping-search!")
  (signature
   lambda
   ((mapping? mapping) key (procedure? failure) (procedure? success))
   (values mapping? *))
  (subsigs
   (failure (lambda ((procedure? insert) (procedure? ignore)) *))
   (insert (lambda (value obj) *))
   (ignore (lambda (obj) *))
   (success (lambda (key value (procedure? update) (procedure? remove)) *))
   (update (lambda (new-key new-value obj) *))
   (remove (lambda (obj) *))))
 ((name . "mapping-size")
  (signature lambda ((mapping? mapping)) integer?)
  (tags pure))
 ((name . "mapping-find")
  (signature
   lambda
   ((procedure? predicate) (mapping? mapping) (procedure? failure))
   (values * *))
  (subsigs (predicate (lambda (key value) boolean?)) (failure (lambda () *)))
  (tags pure))
 ((name . "mapping-count")
  (signature lambda ((procedure? predicate) (mapping? mapping)) integer?)
  (subsigs (predicate (lambda (key value) boolean?)))
  (tags pure))
 ((name . "mapping-any?")
  (signature lambda ((procedure? predicate) (mapping? mapping)) boolean?)
  (subsigs (predicate (lambda (key value) boolean?)))
  (tags pure))
 ((name . "mapping-every?")
  (signature lambda ((procedure? predicate) (mapping? mapping)) boolean?)
  (subsigs (predicate (lambda (key value) boolean?)))
  (tags pure))
 ((name . "mapping-keys")
  (signature lambda ((mapping? mapping)) list?)
  (tags pure))
 ((name . "mapping-values")
  (signature lambda ((mapping? mapping)) list?)
  (tags pure))
 ((name . "mapping-entries")
  (signature lambda ((mapping? mapping)) (values list? list?))
  (tags pure))
 ((name . "mapping-map")
  (signature
   lambda
   ((procedure? proc) (comparator? comparator) (mapping? mapping))
   mapping?)
  (subsigs (proc (lambda (key value) (values * *))))
  (tags pure))
 ((name . "mapping-for-each")
  (signature
   lambda
   ((procedure? proc) (comparator? comparator) (mapping? mapping))
   undefined)
  (subsigs (proc (lambda (key value) undefined))))
 ((name . "mapping-fold")
  (signature lambda ((procedure? proc) nil (mapping? mapping)) *)
  (subsigs (proc (lambda (key value state) *)))
  (tags pure))
 ((name . "mapping-map->list")
  (signature lambda ((procedure? proc) (mapping? mapping)) list?)
  (subsigs (proc (lambda (key value) *)))
  (tags pure))
 ((name . "mapping-filter")
  (signature lambda ((procedure? predicate) (mapping? mapping)) mapping?)
  (subsigs (predicate (lambda (key value) boolean?)))
  (tags pure))
 ((name . "mapping-filter!")
  (signature lambda ((procedure? predicate) (mapping? mapping)) mapping?)
  (subsigs (predicate (lambda (key value) boolean?))))
 ((name . "mapping-remove")
  (signature lambda ((procedure? predicate) (mapping? mapping)) mapping?)
  (subsigs (predicate (lambda (key value) boolean?)))
  (tags pure))
 ((name . "mapping-remove!")
  (signature lambda ((procedure? predicate) (mapping? mapping)) mapping?)
  (subsigs (predicate (lambda (key value) boolean?))))
 ((name . "mapping-partition")
  (signature
   lambda
   ((procedure? predicate) (mapping? mapping))
   (values mapping? mapping?))
  (subsigs (predicate (lambda (key value) boolean?)))
  (tags pure))
 ((name . "mapping-partition!")
  (signature
   lambda
   ((procedure? predicate) (mapping? mapping))
   (values mapping? mapping?))
  (subsigs (predicate (lambda (key value) boolean?))))
 ((name . "mapping-copy")
  (signature lambda ((mapping? mapping)) mapping?)
  (tags pure))
 ((name . "mapping->alist")
  (signature lambda ((mapping? mapping)) list?)
  (tags pure))
 ((name . "alist->mapping")
  (signature lambda ((comparator? comparator) (list? alist)) mapping?)
  (tags pure))
 ((name . "alist->mapping!")
  (signature lambda ((mapping? mapping) (list? alist)) mapping?))
 ((name . "mapping=?")
  (signature
   lambda
   ((comparator? comparator) (mapping? mapping1) (mapping? mapping2) ...)
   boolean?)
  (tags pure))
 ((name . "mapping<?")
  (signature
   lambda
   ((comparator? comparator) (mapping? mapping1) (mapping? mapping2) ...)
   boolean?)
  (tags pure))
 ((name . "mapping>?")
  (signature
   lambda
   ((comparator? comparator) (mapping? mapping1) (mapping? mapping2) ...)
   boolean?)
  (tags pure))
 ((name . "mapping<=?")
  (signature
   lambda
   ((comparator? comparator) (mapping? mapping1) (mapping? mapping2) ...)
   boolean?)
  (tags pure))
 ((name . "mapping>=?")
  (signature
   lambda
   ((comparator? comparator) (mapping? mapping1) (mapping? mapping2) ...)
   boolean?)
  (tags pure))
 ((name . "mapping-union")
  (signature lambda ((mapping? mapping1) (mapping? mapping2) ...) mapping?)
  (tags pure))
 ((name . "mapping-intersection")
  (signature lambda ((mapping? mapping1) (mapping? mapping2) ...) mapping?)
  (tags pure))
 ((name . "mapping-difference")
  (signature lambda ((mapping? mapping1) (mapping? mapping2) ...) mapping?)
  (tags pure))
 ((name . "mapping-xor")
  (signature lambda ((mapping? mapping1) (mapping? mapping2)) mapping?)
  (tags pure))
 ((name . "mapping-union!")
  (signature lambda ((mapping? mapping1) (mapping? mapping2) ...) mapping?))
 ((name . "mapping-intersection!")
  (signature lambda ((mapping? mapping1) (mapping? mapping2) ...) mapping?))
 ((name . "mapping-difference!")
  (signature lambda ((mapping? mapping1) (mapping? mapping2) ...) mapping?))
 ((name . "mapping-xor!")
  (signature lambda ((mapping? mapping1) (mapping? mapping2)) mapping?))
 ((name . "mapping/ordered")
  (signature lambda ((comparator? comparator) arg ...) mapping?)
  (tags pure))
 ((name . "mapping-unfold/ordered")
  (signature
   lambda
   ((procedure? stop?)
    (procedure? mapper)
    (procedure? successor)
    seed
    (comparator? comparator))
   mapping?)
  (subsigs
   (stop? (lambda (seed) boolean?))
   (mapper (lambda (seed) (values * *)))
   (successor (lambda (seed) *)))
  (tags pure))
 ((name . "alist->mapping/ordered")
  (signature lambda ((comparator? comparator) (list? alist)) mapping?)
  (tags pure))
 ((name . "alist->mapping/ordered!")
  (signature lambda ((mapping? mapping) (list? alist)) mapping?))
 ((name . "mapping-min-key")
  (signature lambda ((mapping? mapping)) *)
  (tags pure))
 ((name . "mapping-max-key")
  (signature lambda ((mapping? mapping)) *)
  (tags pure))
 ((name . "mapping-min-value")
  (signature lambda ((mapping? mapping)) *)
  (tags pure))
 ((name . "mapping-max-value")
  (signature lambda ((mapping? mapping)) *)
  (tags pure))
 ((name . "mapping-min-entry")
  (signature lambda ((mapping? mapping)) (values * *))
  (tags pure))
 ((name . "mapping-max-entry")
  (signature lambda ((mapping? mapping)) (values * *))
  (tags pure))
 ((name . "mapping-key-predecessor")
  (signature lambda ((mapping? mapping) obj (procedure? failure)) *)
  (subsigs (failure (lambda () *)))
  (tags pure))
 ((name . "mapping-key-successor")
  (signature lambda ((mapping? mapping) obj (procedure? failure)) *)
  (subsigs (failure (lambda () *)))
  (tags pure))
 ((name . "mapping-range=")
  (signature lambda ((mapping? mapping) obj) mapping?)
  (tags pure))
 ((name . "mapping-range<")
  (signature lambda ((mapping? mapping) obj) mapping?)
  (tags pure))
 ((name . "mapping-range>")
  (signature lambda ((mapping? mapping) obj) mapping?)
  (tags pure))
 ((name . "mapping-range<=")
  (signature lambda ((mapping? mapping) obj) mapping?)
  (tags pure))
 ((name . "mapping-range>=")
  (signature lambda ((mapping? mapping) obj) mapping?)
  (tags pure))
 ((name . "mapping-range=!")
  (signature lambda ((mapping? mapping) obj) mapping?))
 ((name . "mapping-range<!")
  (signature lambda ((mapping? mapping) obj) mapping?))
 ((name . "mapping-range>!")
  (signature lambda ((mapping? mapping) obj) mapping?))
 ((name . "mapping-range<=!")
  (signature lambda ((mapping? mapping) obj) mapping?))
 ((name . "mapping-range>=!")
  (signature lambda ((mapping? mapping) obj) mapping?))
 ((name . "mapping-split")
  (signature
   lambda
   ((mapping? mapping) obj)
   (values mapping? mapping? mapping? mapping? mapping?))
  (tags pure))
 ((name . "mapping-split!")
  (signature
   lambda
   ((mapping? mapping) obj)
   (values mapping? mapping? mapping? mapping? mapping?)))
 ((name . "mapping-catenate")
  (signature
   lambda
   ((mapping? mapping1) key value (mapping? mapping2))
   mapping?)
  (tags pure))
 ((name . "mapping-catenate!")
  (signature
   lambda
   ((mapping? mapping1) key value (mapping? mapping2))
   mapping?))
 ((name . "mapping-map/monotone")
  (signature
   lambda
   ((procedure? proc) (comparator? comparator) (mapping? mapping))
   mapping?)
  (subsigs (proc (lambda (key value) (values * *))))
  (tags pure))
 ((name . "mapping-map/monotone!")
  (signature
   lambda
   ((procedure? proc) (comparator? comparator) (mapping? mapping))
   mapping?)
  (subsigs (proc (lambda (key value) (values * *)))))
 ((name . "mapping-fold/reverse")
  (signature lambda ((procedure? proc) nil (mapping? mapping)) *)
  (subsigs (proc (lambda (key value state) *)))
  (tags pure))
 ((name . "comparator?")
  (signature lambda (obj) boolean?)
  (tags pure predicate))
 ((name . "make-mapping-comparator")
  (signature lambda ((comparator? comparator)) comparator?)
  (tags pure))
 ((name . "mapping-comparator") (signature value comparator?)))
