(((name . "current-thread") (signature lambda () thread?))
 ((name . "thread?")
  (signature lambda (object) boolean?)
  (tags pure predicate))
 ((name . "make-thread")
  (signature lambda ((procedure? thunk)) thread?)
  (subsigs (thunk (lambda () *))))
 ((name . "make-thread")
  (signature lambda ((procedure? thunk) name) thread?)
  (subsigs (thunk (lambda () *))))
 ((name . "thread-name") (signature lambda ((thread? thread)) *) (tags pure))
 ((name . "thread-specific")
  (signature lambda ((thread? thread)) *)
  (tags pure))
 ((name . "thread-specific-set!")
  (signature lambda ((thread? thread) obj) undefined))
 ((name . "thread-base-priority")
  (signature lambda ((thread? thread)) real?)
  (tags pure))
 ((name . "thread-base-priority-set!")
  (signature lambda ((thread? thread) (real? priority)) undefined))
 ((name . "thread-priority-boost")
  (signature lambda ((thread? thread)) real?)
  (tags pure))
 ((name . "thread-priority-boost-set!")
  (signature lambda ((thread? thread) (real? priority-boost)) undefined))
 ((name . "thread-quantum")
  (signature lambda ((thread? thread)) real?)
  (tags pure))
 ((name . "thread-quantum-set!")
  (signature lambda ((thread? thread) (real? quantum)) undefined))
 ((name . "thread-start!") (signature lambda ((thread? thread)) undefined))
 ((name . "thread-yield!") (signature lambda ((thread? thread)) undefined))
 ((name . "thread-sleep!") (signature lambda ((integer? timeout)) undefined))
 ((name . "thread-terminate!") (signature lambda ((thread? thread)) undefined))
 ((name . "thread-join!") (signature lambda ((thread? thread)) *))
 ((name . "thread-join!")
  (signature lambda ((thread? thread) (integer? timeout)) *))
 ((name . "thread-join!")
  (signature lambda ((thread? thread) (integer? timeout) timeout-val) *))
 ((name . "mutex?") (signature lambda (object) boolean?) (tags pure predicate))
 ((name . "make-mutex") (signature lambda () mutex?))
 ((name . "make-mutex") (signature lambda (name) mutex?))
 ((name . "mutex-name") (signature lambda ((mutex? mutex)) *) (tags pure))
 ((name . "mutex-specific") (signature lambda ((mutex? mutex)) *) (tags pure))
 ((name . "mutex-specific-set!")
  (signature lambda ((mutex? mutex) obj) undefined))
 ((name . "mutex-state")
  (signature lambda ((mutex? mutex)) (or thread? symbol?))
  (spec-values
   (return
    ("thread?"
     "the mutex is in the locked/owned state and thread T is the owner of the mutex")
    ("'not-owned" "the mutex is in the locked/not-owned state")
    ("'abandoned" "the mutex is in the unlocked/abandoned state")
    ("'not-abandoned" " the mutex is in the unlocked/not-abandoned state"))))
 ((name . "mutex-lock!") (signature lambda ((mutex? mutex)) boolean?))
 ((name . "mutex-lock!")
  (signature lambda ((mutex? mutex) (integer? timeout)) boolean?))
 ((name . "mutex-lock!")
  (signature
   lambda
   ((mutex? mutex) (integer? timeout) ((or #f thread?) thread))
   boolean?))
 ((name . "mutex-unlock!") (signature lambda ((mutex? mutex)) boolean?))
 ((name . "mutex-unlock!")
  (signature
   lambda
   ((mutex? mutex) (condition-variable? condition-variable))
   boolean?))
 ((name . "mutex-unlock!")
  (signature
   lambda
   ((mutex? mutex) (condition-variable? condition-variable) (integer? timeout))
   boolean?))
 ((name . "condition-variable?")
  (signature lambda (object) boolean?)
  (tags pure predicate))
 ((name . "make-condition-variable") (signature lambda () condition-variable?))
 ((name . "make-condition-variable")
  (signature lambda (name) condition-variable?))
 ((name . "make-condition-variable")
  (signature lambda (name) condition-variable?))
 ((name . "condition-variable-name")
  (signature lambda ((condition-variable? condition-variable)) *)
  (tags pure))
 ((name . "condition-variable-specific")
  (signature lambda ((condition-variable? condition-variable)) *)
  (tags pure))
 ((name . "condition-variable-specific-set!")
  (signature lambda ((condition-variable? condition-variable) obj) undefined))
 ((name . "condition-variable-signal!")
  (signature lambda ((condition-variable? condition-variable)) undefined))
 ((name . "condition-variable-broadcast!")
  (signature lambda ((condition-variable? condition-variable)) undefined))
 ((name . "current-time") (signature lambda () time?))
 ((name . "time?") (signature lambda (obj) boolean?) (tags pure predicate))
 ((name . "time->seconds") (signature lambda ((time? time)) real?) (tags pure))
 ((name . "seconds->time")
  (signature lambda ((real? seconds)) time?)
  (tags pure))
 ((name . "current-exception-handler")
  (signature lambda () procedure?)
  (subsigs (return (lambda (err) *))))
 ((name . "with-exception-handler")
  (signature lambda ((procedure? handler) (procedure? thunk)) *)
  (subsigs (handler (lambda (err) *)) (thunk (lambda () *))))
 ((name . "raise") (signature lambda (obj) undefined))
 ((name . "join-timeout-exception?")
  (signature lambda (obj) boolean?)
  (tags pure predicate))
 ((name . "abandoned-mutex-exception?")
  (signature lambda (obj) boolean?)
  (tags pure predicate))
 ((name . "terminated-thread-exception?")
  (signature lambda (obj) boolean?)
  (tags pure predicate))
 ((name . "uncaught-exception?")
  (signature lambda (obj) boolean?)
  (tags pure predicate))
 ((name . "uncaught-exception-reason")
  (signature lambda ((uncaught-exception? exc)) *)
  (tags pure)))
