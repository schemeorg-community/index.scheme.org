(((name . "string?") (signature lambda (obj) boolean?) (tags pure predicate))
 ((name . "string-null?")
  (signature lambda ((string? s)) boolean?)
  (tags pure))
 ((name . "string-every")
  (signature lambda (((or char? char-set? procedure?) c) (string? s)) *)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-every")
  (signature
   lambda
   ((or char? char-set? procedure?) (string? s) (integer? start))
   *)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-every")
  (signature
   lambda
   ((or char? char-set? procedure?)
    (string? s)
    (integer? start)
    (integer? end))
   *)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-any")
  (signature lambda (((or char? char-set? procedure?) c) (string? s)) *)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-any")
  (signature
   lambda
   ((or char? char-set? procedure?) (string? s) (integer? start))
   *)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-any")
  (signature
   lambda
   ((or char? char-set? procedure?)
    (string? s)
    (integer? start)
    (integer? end))
   *)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "make-string") (signature lambda ((integer? k)) string?))
 ((name . "make-string")
  (signature lambda ((integer? k) (char? char)) string?)
  (tags pure))
 ((name . "string") (signature lambda ((char? char) ...) string?) (tags pure))
 ((name . "string-tabulate")
  (signature lambda ((procedure? proc) (integer? len)) string?)
  (subsigs (proc (lambda ((integer? index)) char?)))
  (tags pure))
 ((name . "string->list")
  (signature lambda ((string? string)) list?)
  (tags pure))
 ((name . "string->list")
  (signature lambda ((string? string) (integer? start)) list?)
  (tags pure))
 ((name . "string->list")
  (signature lambda ((string? string) (integer? start) (integer? end)) list?)
  (tags pure))
 ((name . "list->string")
  (signature lambda ((list? list)) string?)
  (tags pure))
 ((name . "reverse-list->string")
  (signature lambda ((list? list)) string?)
  (tags pure))
 ((name . "string-join")
  (signature lambda ((list? string-list)) string?)
  (tags pure))
 ((name . "string-join")
  (signature lambda ((list? string-list) (string? delimiter)) string?)
  (tags pure))
 ((name . "string-join")
  (signature
   lambda
   ((list? string-list) (string? delimiter) (symbol? grammar))
   string?)
  (tags pure)
  (spec-values
   (grammar
    ("'infix"
     "infix or separator grammar: insert the delimiter between list elements. An empty list will produce an empty string -- note, however, that parsing an empty string with an infix or separator grammar is ambiguous. Is it an empty list, or a list of one element, the empty string?")
    ("'strict-infix"
     "same as 'infix, but will raise an error if given an empty list.")
    ("'suffix"
     "suffix or terminator grammar: insert the delimiter after every list element. This grammar has no ambiguities.")
    ("'prefix"
     "prefix grammar: insert the delimiter before every list element. This grammar has no ambiguities."))))
 ((name . "string-length")
  (signature lambda ((string? string)) integer?)
  (tags pure))
 ((name . "string-ref")
  (signature lambda ((string? string) (integer? k)) char?)
  (tags pure))
 ((name . "string-copy")
  (signature lambda ((string? string)) string?)
  (tags pure))
 ((name . "string-copy")
  (signature lambda ((string? string) (integer? start)) string?)
  (tags pure))
 ((name . "string-copy")
  (signature lambda ((string? string) (integer? start) (integer? end)) string?)
  (tags pure))
 ((name . "substring/shared")
  (signature lambda ((string? string)) string?)
  (tags pure))
 ((name . "substring/shared")
  (signature lambda ((string? string) (integer? start)) string?)
  (tags pure))
 ((name . "substring/shared")
  (signature lambda ((string? string) (integer? start) (integer? end)) string?)
  (tags pure))
 ((name . "string-copy!")
  (signature lambda ((string? to) (integer? at) (string? from)) undefined))
 ((name . "string-copy!")
  (signature
   lambda
   ((string? to) (integer? at) (string? from) (integer? start))
   undefined))
 ((name . "string-copy!")
  (signature
   lambda
   ((string? to) (integer? at) (string? from) (integer? start) (integer? end))
   undefined))
 ((name . "string-take")
  (signature lambda ((string? s) (integer? nchars)) string?)
  (tags pure))
 ((name . "string-drop")
  (signature lambda ((string? s) (integer? nchars)) string?)
  (tags pure))
 ((name . "string-take-right")
  (signature lambda ((string? s) (integer? nchars)) string?)
  (tags pure))
 ((name . "string-drop-right")
  (signature lambda ((string? s) (integer? nchars)) string?)
  (tags pure))
 ((name . "string-pad")
  (signature lambda ((string? s) (integer? len)) string?)
  (tags pure))
 ((name . "string-pad")
  (signature lambda ((string? s) (integer? len) (char? char)) string?)
  (tags pure))
 ((name . "string-pad")
  (signature
   lambda
   ((string? s) (integer? len) (char? char) (integer? start))
   string?)
  (tags pure))
 ((name . "string-pad")
  (signature
   lambda
   ((string? s) (integer? len) (char? char) (integer? start) (integer? end))
   string?)
  (tags pure))
 ((name . "string-pad-right")
  (signature lambda ((string? s) (integer? len)) string?)
  (tags pure))
 ((name . "string-pad-right")
  (signature lambda ((string? s) (integer? len) (char? char)) string?)
  (tags pure))
 ((name . "string-pad-right")
  (signature
   lambda
   ((string? s) (integer? len) (char? char) (integer? start))
   string?)
  (tags pure))
 ((name . "string-pad-right")
  (signature
   lambda
   ((string? s) (integer? len) (char? char) (integer? start) (integer? end))
   string?)
  (tags pure))
 ((name . "string-trim")
  (signature lambda (((or char? char-set? procedure?) c) (string? s)) string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-trim")
  (signature
   lambda
   ((or char? char-set? procedure?) (string? s) (integer? start))
   string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-trim")
  (signature
   lambda
   ((or char? char-set? procedure?)
    (string? s)
    (integer? start)
    (integer? end))
   string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-trim-right")
  (signature lambda (((or char? char-set? procedure?) c) (string? s)) string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-trim-right")
  (signature
   lambda
   ((or char? char-set? procedure?) (string? s) (integer? start))
   string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-trim-right")
  (signature
   lambda
   ((or char? char-set? procedure?)
    (string? s)
    (integer? start)
    (integer? end))
   string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-trim-both")
  (signature lambda (((or char? char-set? procedure?) c) (string? s)) string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-trim-both")
  (signature
   lambda
   ((or char? char-set? procedure?) (string? s) (integer? start))
   string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-trim-both")
  (signature
   lambda
   ((or char? char-set? procedure?)
    (string? s)
    (integer? start)
    (integer? end))
   string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-set!")
  (signature lambda ((string? string) (integer? k) (char? char)) undefined))
 ((name . "string-fill!")
  (signature lambda ((string? string) (char? fill)) undefined))
 ((name . "string-fill!")
  (signature
   lambda
   ((string? string) (char? fill) (integer? start))
   undefined))
 ((name . "string-fill!")
  (signature
   lambda
   ((string? string) (char? fill) (integer? start) (integer? end))
   undefined))
 ((name . "string-compare")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (procedure? proc<)
    (procedure? proc=)
    (procedure? proc>))
   *)
  (subsigs
   (proc< (lambda ((integer? index)) *))
   (proc= (lambda ((integer? index)) *))
   (proc> (lambda ((integer? index)) *)))
  (tags pure))
 ((name . "string-compare")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (procedure? proc<)
    (procedure? proc=)
    (procedure? proc>)
    (integer? start1))
   *)
  (subsigs
   (proc< (lambda ((integer? index)) *))
   (proc= (lambda ((integer? index)) *))
   (proc> (lambda ((integer? index)) *)))
  (tags pure))
 ((name . "string-compare")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (procedure? proc<)
    (procedure? proc=)
    (procedure? proc>)
    (integer? start1)
    (integer? end1))
   *)
  (subsigs
   (proc< (lambda ((integer? index)) *))
   (proc= (lambda ((integer? index)) *))
   (proc> (lambda ((integer? index)) *)))
  (tags pure))
 ((name . "string-compare")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (procedure? proc<)
    (procedure? proc=)
    (procedure? proc>)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   *)
  (subsigs
   (proc< (lambda ((integer? index)) *))
   (proc= (lambda ((integer? index)) *))
   (proc> (lambda ((integer? index)) *)))
  (tags pure))
 ((name . "string-compare")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (procedure? proc<)
    (procedure? proc=)
    (procedure? proc>)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   *)
  (subsigs
   (proc< (lambda ((integer? index)) *))
   (proc= (lambda ((integer? index)) *))
   (proc> (lambda ((integer? index)) *)))
  (tags pure))
 ((name . "string-compare-ci")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (procedure? proc<)
    (procedure? proc=)
    (procedure? proc>))
   *)
  (subsigs
   (proc< (lambda ((integer? index)) *))
   (proc= (lambda ((integer? index)) *))
   (proc> (lambda ((integer? index)) *)))
  (tags pure))
 ((name . "string-compare-ci")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (procedure? proc<)
    (procedure? proc=)
    (procedure? proc>)
    (integer? start1))
   *)
  (subsigs
   (proc< (lambda ((integer? index)) *))
   (proc= (lambda ((integer? index)) *))
   (proc> (lambda ((integer? index)) *)))
  (tags pure))
 ((name . "string-compare-ci")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (procedure? proc<)
    (procedure? proc=)
    (procedure? proc>)
    (integer? start1)
    (integer? end1))
   *)
  (subsigs
   (proc< (lambda ((integer? index)) *))
   (proc= (lambda ((integer? index)) *))
   (proc> (lambda ((integer? index)) *)))
  (tags pure))
 ((name . "string-compare-ci")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (procedure? proc<)
    (procedure? proc=)
    (procedure? proc>)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   *)
  (subsigs
   (proc< (lambda ((integer? index)) *))
   (proc= (lambda ((integer? index)) *))
   (proc> (lambda ((integer? index)) *)))
  (tags pure))
 ((name . "string-compare-ci")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (procedure? proc<)
    (procedure? proc=)
    (procedure? proc>)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   *)
  (subsigs
   (proc< (lambda ((integer? index)) *))
   (proc= (lambda ((integer? index)) *))
   (proc> (lambda ((integer? index)) *)))
  (tags pure))
 ((name . "string=")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string=")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string=")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string=")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string=")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string<>")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string<>")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string<>")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string<>")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string<>")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string<")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string<")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string<")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string<")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string<")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string>")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string>")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string>")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string>")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string>")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string<=")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string<=")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string<=")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string<=")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string<=")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string>=")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string>=")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string>=")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string>=")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string>=")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string-ci=")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string-ci=")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string-ci=")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string-ci=")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string-ci=")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string-ci<>")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string-ci<>")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string-ci<>")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string-ci<>")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string-ci<>")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string-ci<")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string-ci<")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string-ci<")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string-ci<")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string-ci<")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string-ci>")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string-ci>")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string-ci>")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string-ci>")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string-ci>")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string-ci<=")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string-ci<=")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string-ci<=")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string-ci<=")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string-ci<=")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string-ci>=")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string-ci>=")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string-ci>=")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string-ci>=")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string-ci>=")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string-hash") (signature lambda ((string? s)) integer?) (tags pure))
 ((name . "string-hash")
  (signature lambda ((string? s) (integer? bound)) integer?)
  (tags pure))
 ((name . "string-hash")
  (signature lambda ((string? s) (integer? bound) (integer? start)) integer?)
  (tags pure))
 ((name . "string-hash")
  (signature
   lambda
   ((string? s) (integer? bound) (integer? start) (integer? end))
   integer?)
  (tags pure))
 ((name . "string-hash-ci")
  (signature lambda ((string? s)) integer?)
  (tags pure))
 ((name . "string-hash-ci")
  (signature lambda ((string? s) (integer? bound)) integer?)
  (tags pure))
 ((name . "string-hash-ci")
  (signature lambda ((string? s) (integer? bound) (integer? start)) integer?)
  (tags pure))
 ((name . "string-hash-ci")
  (signature
   lambda
   ((string? s) (integer? bound) (integer? start) (integer? end))
   integer?)
  (tags pure))
 ((name . "string-prefix-length")
  (signature lambda ((string? s1) (string? s2)) integer?)
  (tags pure))
 ((name . "string-prefix-length")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) integer?)
  (tags pure))
 ((name . "string-prefix-length")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   integer?)
  (tags pure))
 ((name . "string-prefix-length")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   integer?)
  (tags pure))
 ((name . "string-prefix-length")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   integer?)
  (tags pure))
 ((name . "string-suffix-length")
  (signature lambda ((string? s1) (string? s2)) integer?)
  (tags pure))
 ((name . "string-suffix-length")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) integer?)
  (tags pure))
 ((name . "string-suffix-length")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   integer?)
  (tags pure))
 ((name . "string-suffix-length")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   integer?)
  (tags pure))
 ((name . "string-suffix-length")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   integer?)
  (tags pure))
 ((name . "string-prefix-length-ci")
  (signature lambda ((string? s1) (string? s2)) integer?)
  (tags pure))
 ((name . "string-prefix-length-ci")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) integer?)
  (tags pure))
 ((name . "string-prefix-length-ci")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   integer?)
  (tags pure))
 ((name . "string-prefix-length-ci")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   integer?)
  (tags pure))
 ((name . "string-prefix-length-ci")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   integer?)
  (tags pure))
 ((name . "string-suffix-length-ci")
  (signature lambda ((string? s1) (string? s2)) integer?)
  (tags pure))
 ((name . "string-suffix-length-ci")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) integer?)
  (tags pure))
 ((name . "string-suffix-length-ci")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   integer?)
  (tags pure))
 ((name . "string-suffix-length-ci")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   integer?)
  (tags pure))
 ((name . "string-suffix-length-ci")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   integer?)
  (tags pure))
 ((name . "string-prefix?")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string-prefix?")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string-prefix?")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string-prefix?")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string-prefix?")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string-suffix?")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string-suffix?")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string-suffix?")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string-suffix?")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string-suffix?")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string-prefix-ci?")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string-prefix-ci?")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string-prefix-ci?")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string-prefix-ci?")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string-prefix-ci?")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string-suffix-ci?")
  (signature lambda ((string? s1) (string? s2)) boolean?)
  (tags pure))
 ((name . "string-suffix-ci?")
  (signature lambda ((string? s1) (string? s2) (integer? start1)) boolean?)
  (tags pure))
 ((name . "string-suffix-ci?")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   boolean?)
  (tags pure))
 ((name . "string-suffix-ci?")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   boolean?)
  (tags pure))
 ((name . "string-suffix-ci?")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   boolean?)
  (tags pure))
 ((name . "string-index")
  (signature
   lambda
   (((or char? char-set? procedure?) c) (string? s))
   (or integer? #f))
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-index")
  (signature
   lambda
   ((or char? char-set? procedure?) (string? s) (integer? start))
   (or integer? #f))
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-index")
  (signature
   lambda
   ((or char? char-set? procedure?)
    (string? s)
    (integer? start)
    (integer? end))
   (or integer? #f))
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-index-right")
  (signature
   lambda
   (((or char? char-set? procedure?) c) (string? s))
   (or integer? #f))
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-index-right")
  (signature
   lambda
   ((or char? char-set? procedure?) (string? s) (integer? start))
   (or integer? #f))
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-index-right")
  (signature
   lambda
   ((or char? char-set? procedure?)
    (string? s)
    (integer? start)
    (integer? end))
   (or integer? #f))
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-skip")
  (signature
   lambda
   (((or char? char-set? procedure?) c) (string? s))
   (or integer? #f))
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-skip")
  (signature
   lambda
   ((or char? char-set? procedure?) (string? s) (integer? start))
   (or integer? #f))
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-skip")
  (signature
   lambda
   ((or char? char-set? procedure?)
    (string? s)
    (integer? start)
    (integer? end))
   (or integer? #f))
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-skip-right")
  (signature
   lambda
   (((or char? char-set? procedure?) c) (string? s))
   (or integer? #f))
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-skip-right")
  (signature
   lambda
   ((or char? char-set? procedure?) (string? s) (integer? start))
   (or integer? #f))
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-skip-right")
  (signature
   lambda
   ((or char? char-set? procedure?)
    (string? s)
    (integer? start)
    (integer? end))
   (or integer? #f))
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-count")
  (signature lambda (((or char? char-set? procedure?) c) (string? s)) integer?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-count")
  (signature
   lambda
   ((or char? char-set? procedure?) (string? s) (integer? start))
   integer?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-count")
  (signature
   lambda
   ((or char? char-set? procedure?)
    (string? s)
    (integer? start)
    (integer? end))
   integer?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-contains")
  (signature lambda ((string? s1) (string? s2)) (or integer? #f))
  (tags pure))
 ((name . "string-contains")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1))
   (or integer? #f))
  (tags pure))
 ((name . "string-contains")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   (or integer? #f))
  (tags pure))
 ((name . "string-contains")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   (or integer? #f))
  (tags pure))
 ((name . "string-contains")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   (or integer? #f))
  (tags pure))
 ((name . "string-contains-ci")
  (signature lambda ((string? s1) (string? s2)) (or integer? #f))
  (tags pure))
 ((name . "string-contains-ci")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1))
   (or integer? #f))
  (tags pure))
 ((name . "string-contains-ci")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   (or integer? #f))
  (tags pure))
 ((name . "string-contains-ci")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   (or integer? #f))
  (tags pure))
 ((name . "string-contains-ci")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   (or integer? #f))
  (tags pure))
 ((name . "string-titlecase")
  (signature lambda ((string? s)) string?)
  (tags pure))
 ((name . "string-titlecase")
  (signature lambda ((string? s) (integer? start)) string?)
  (tags pure))
 ((name . "string-titlecase")
  (signature lambda ((string? s) (integer? start) (integer? end)) string?)
  (tags pure))
 ((name . "string-titlecase!") (signature lambda ((string? s)) undefined))
 ((name . "string-titlecase!")
  (signature lambda ((string? s) (integer? start)) undefined))
 ((name . "string-titlecase!")
  (signature lambda ((string? s) (integer? start) (integer? end)) undefined))
 ((name . "string-upcase")
  (signature lambda ((string? s)) string?)
  (tags pure))
 ((name . "string-upcase")
  (signature lambda ((string? s) (integer? start)) string?)
  (tags pure))
 ((name . "string-upcase")
  (signature lambda ((string? s) (integer? start) (integer? end)) string?)
  (tags pure))
 ((name . "string-upcase!") (signature lambda ((string? s)) undefined))
 ((name . "string-upcase!")
  (signature lambda ((string? s) (integer? start)) undefined))
 ((name . "string-upcase!")
  (signature lambda ((string? s) (integer? start) (integer? end)) undefined))
 ((name . "string-downcase")
  (signature lambda ((string? s)) string?)
  (tags pure))
 ((name . "string-downcase")
  (signature lambda ((string? s) (integer? start)) string?)
  (tags pure))
 ((name . "string-downcase")
  (signature lambda ((string? s) (integer? start) (integer? end)) string?)
  (tags pure))
 ((name . "string-downcase!") (signature lambda ((string? s)) undefined))
 ((name . "string-downcase!")
  (signature lambda ((string? s) (integer? start)) undefined))
 ((name . "string-downcase!")
  (signature lambda ((string? s) (integer? start) (integer? end)) undefined))
 ((name . "string-reverse")
  (signature lambda ((string? s)) string?)
  (tags pure))
 ((name . "string-reverse")
  (signature lambda ((string? s) (integer? start)) string?)
  (tags pure))
 ((name . "string-reverse")
  (signature lambda ((string? s) (integer? start) (integer? end)) string?)
  (tags pure))
 ((name . "string-reverse!") (signature lambda ((string? s)) undefined))
 ((name . "string-reverse!")
  (signature lambda ((string? s) (integer? start)) undefined))
 ((name . "string-reverse!")
  (signature lambda ((string? s) (integer? start) (integer? end)) undefined))
 ((name . "string-append")
  (signature lambda ((string? string) ...) string?)
  (tags pure))
 ((name . "string-concatenate")
  (signature lambda ((list? string-list)) string?)
  (tags pure))
 ((name . "string-append/shared")
  (signature lambda ((string? string) ...) string?)
  (tags pure))
 ((name . "string-concatenate/shared")
  (signature lambda ((list? string-list)) string?)
  (tags pure))
 ((name . "string-concatenate-reverse")
  (signature lambda ((list? string-list)) string?)
  (tags pure))
 ((name . "string-concatenate-reverse")
  (signature lambda ((list? string-list) (string? final-string)) string?)
  (tags pure))
 ((name . "string-concatenate-reverse")
  (signature
   lambda
   ((list? string-list) (string? final-string) (integer? end))
   string?)
  (tags pure))
 ((name . "string-concatenate-reverse/shared")
  (signature lambda ((list? string-list)) string?)
  (tags pure))
 ((name . "string-concatenate-reverse/shared")
  (signature lambda ((list? string-list) (string? final-string)) string?)
  (tags pure))
 ((name . "string-concatenate-reverse/shared")
  (signature
   lambda
   ((list? string-list) (string? final-string) (integer? end))
   string?)
  (tags pure))
 ((name . "string-map")
  (signature lambda ((procedure? proc) (string? s)) string?)
  (subsigs (proc (lambda ((char? c) ...) char?)))
  (tags pure))
 ((name . "string-map")
  (signature lambda ((procedure? proc) (string? s) (integer? start)) string?)
  (subsigs (proc (lambda ((char? c) ...) char?)))
  (tags pure))
 ((name . "string-map")
  (signature
   lambda
   ((procedure? proc) (string? s) (integer? start) (integer? end))
   string?)
  (subsigs (proc (lambda ((char? c) ...) char?)))
  (tags pure))
 ((name . "string-map!")
  (signature lambda ((procedure? proc) (string? s)) undefined)
  (subsigs (proc (lambda ((char? c) ...) char?))))
 ((name . "string-map!")
  (signature lambda ((procedure? proc) (string? s) (integer? start)) undefined)
  (subsigs (proc (lambda ((char? c) ...) char?))))
 ((name . "string-map!")
  (signature
   lambda
   ((procedure? proc) (string? s) (integer? start) (integer? end))
   undefined)
  (subsigs (proc (lambda ((char? c) ...) char?))))
 ((name . "string-fold")
  (signature lambda ((procedure? kons) knil (string? s)) *)
  (subsigs (kons (lambda ((char? c) state) *)))
  (tags pure))
 ((name . "string-fold")
  (signature lambda ((procedure? kons) knil (string? s) (integer? start)) *)
  (subsigs (kons (lambda ((char? c) state) *)))
  (tags pure))
 ((name . "string-fold")
  (signature
   lambda
   ((procedure? kons) knil (string? s) (integer? start) (integer? end))
   *)
  (subsigs (kons (lambda ((char? c) state) *)))
  (tags pure))
 ((name . "string-fold-right")
  (signature lambda ((procedure? kons) knil (string? s)) *)
  (subsigs (kons (lambda ((char? c) state) *)))
  (tags pure))
 ((name . "string-fold-right")
  (signature lambda ((procedure? kons) knil (string? s) (integer? start)) *)
  (subsigs (kons (lambda ((char? c) state) *)))
  (tags pure))
 ((name . "string-fold-right")
  (signature
   lambda
   ((procedure? kons) knil (string? s) (integer? start) (integer? end))
   *)
  (subsigs (kons (lambda ((char? c) state) *)))
  (tags pure))
 ((name . "string-unfold")
  (signature
   lambda
   ((procedure? p) (procedure? f) (procedure? g) seed)
   string?)
  (subsigs
   (p (lambda (seed) boolean?))
   (f (lambda (seed) *))
   (g (lambda (seed) *)))
  (tags pure))
 ((name . "string-unfold")
  (signature
   lambda
   ((procedure? p) (procedure? f) (procedure? g) seed (string? base))
   string?)
  (subsigs
   (p (lambda (seed) boolean?))
   (f (lambda (seed) *))
   (g (lambda (seed) *)))
  (tags pure))
 ((name . "string-unfold")
  (signature
   lambda
   ((procedure? p)
    (procedure? f)
    (procedure? g)
    seed
    (string? base)
    (procedure? make-final))
   string?)
  (subsigs
   (p (lambda (seed) boolean?))
   (f (lambda (seed) *))
   (g (lambda (seed) *))
   (make-final (lambda (seed) string?)))
  (tags pure))
 ((name . "string-unfold-right")
  (signature
   lambda
   ((procedure? p) (procedure? f) (procedure? g) seed)
   string?)
  (subsigs
   (p (lambda (seed) boolean?))
   (f (lambda (seed) *))
   (g (lambda (seed) *)))
  (tags pure))
 ((name . "string-unfold-right")
  (signature
   lambda
   ((procedure? p) (procedure? f) (procedure? g) seed (string? base))
   string?)
  (subsigs
   (p (lambda (seed) boolean?))
   (f (lambda (seed) *))
   (g (lambda (seed) *)))
  (tags pure))
 ((name . "string-unfold-right")
  (signature
   lambda
   ((procedure? p)
    (procedure? f)
    (procedure? g)
    seed
    (string? base)
    (procedure? make-final))
   string?)
  (subsigs
   (p (lambda (seed) boolean?))
   (f (lambda (seed) *))
   (g (lambda (seed) *))
   (make-final (lambda (seed) string?)))
  (tags pure))
 ((name . "string-for-each")
  (signature lambda ((procedure? proc) (string? s)) undefined)
  (subsigs (proc (lambda ((char? c)) undefined))))
 ((name . "string-for-each")
  (signature lambda ((procedure? proc) (string? s) (integer? start)) undefined)
  (subsigs (proc (lambda ((char? c)) undefined))))
 ((name . "string-for-each")
  (signature
   lambda
   ((procedure? proc) (string? s) (integer? start) (integer? end))
   undefined)
  (subsigs (proc (lambda ((char? c)) undefined))))
 ((name . "string-for-each-index")
  (signature lambda ((procedure? proc) (string? s)) undefined)
  (subsigs (proc (lambda ((integer? index)) undefined))))
 ((name . "string-for-each-index")
  (signature lambda ((procedure? proc) (string? s) (integer? start)) undefined)
  (subsigs (proc (lambda ((integer? index)) undefined))))
 ((name . "string-for-each-index")
  (signature
   lambda
   ((procedure? proc) (string? s) (integer? start) (integer? end))
   undefined)
  (subsigs (proc (lambda ((integer? index)) undefined))))
 ((name . "xsubstring")
  (signature lambda ((string? s) (integer? from)) string?)
  (tags pure))
 ((name . "xsubstring")
  (signature lambda ((string? s) (integer? from) (integer? to)) string?)
  (tags pure))
 ((name . "xsubstring")
  (signature
   lambda
   ((string? s) (integer? from) (integer? to) (integer? start))
   string?)
  (tags pure))
 ((name . "xsubstring")
  (signature
   lambda
   ((string? s) (integer? from) (integer? to) (integer? start) (integer? end))
   string?)
  (tags pure))
 ((name . "string-xcopy!")
  (signature
   lambda
   ((string? target) (integer? tstart) (string? s) (integer? sfrom))
   undefined))
 ((name . "string-xcopy!")
  (signature
   lambda
   ((string? target)
    (integer? tstart)
    (string? s)
    (integer? sfrom)
    (integer? sto))
   undefined))
 ((name . "string-xcopy!")
  (signature
   lambda
   ((string? target)
    (integer? tstart)
    (string? s)
    (integer? sfrom)
    (integer? sto)
    (integer? start))
   undefined))
 ((name . "string-xcopy!")
  (signature
   lambda
   ((string? target)
    (integer? tstart)
    (string? s)
    (integer? sfrom)
    (integer? sto)
    (integer? start)
    (integer? end))
   undefined))
 ((name . "string-replace")
  (signature
   lambda
   ((string? s1) (string? s2) (integer? start1) (integer? end1))
   string?)
  (tags pure))
 ((name . "string-replace")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2))
   string?)
  (tags pure))
 ((name . "string-replace")
  (signature
   lambda
   ((string? s1)
    (string? s2)
    (integer? start1)
    (integer? end1)
    (integer? start2)
    (integer? end2))
   string?)
  (tags pure))
 ((name . "string-tokenize")
  (signature lambda ((string? s)) list?)
  (tags pure))
 ((name . "string-tokenize")
  (signature lambda ((string? s) (char-set? token-set)) list?)
  (tags pure))
 ((name . "string-tokenize")
  (signature lambda ((string? s) (char-set? token-set) (integer? start)) list?)
  (tags pure))
 ((name . "string-tokenize")
  (signature
   lambda
   ((string? s) (char-set? token-set) (integer? start) (integer? end))
   list?)
  (tags pure))
 ((name . "string-filter")
  (signature lambda (((or char? char-set? procedure?) c) (string? s)) string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-filter")
  (signature
   lambda
   (((or char? char-set? procedure?) c) (string? s) (integer? start))
   string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-filter")
  (signature
   lambda
   (((or char? char-set? procedure?) c)
    (string? s)
    (integer? start)
    (integer? end))
   string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-delete")
  (signature lambda (((or char? char-set? procedure?) c) (string? s)) string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-delete")
  (signature
   lambda
   (((or char? char-set? procedure?) c) (string? s) (integer? start))
   string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-delete")
  (signature
   lambda
   (((or char? char-set? procedure?) c)
    (string? s)
    (integer? start)
    (integer? end))
   string?)
  (subsigs (c (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-parse-start+end")
  (signature
   lambda
   ((procedure? proc) (string? s) (list? args))
   (values list? integer? integer?))
  (tags pure))
 ((name . "string-parse-final-start+end")
  (signature
   lambda
   ((procedure? proc) (string? s) (list? args))
   (values integer? integer?))
  (tags pure))
 ((name . "let-string-start+end")
  (signature
   syntax-rules
   ()
   ((_ (start end) proc s args body ...))
   ((_ (rest start end) proc s args body ...)))
  (subsigs (proc (value procedure?)) (s (value string?)) (args (value list?))))
 ((name . "check-substring-spec")
  (signature
   lambda
   ((procedure? proc) (string? s) (integer? start) (integer? end))
   undefined))
 ((name . "substring-spec-ok?")
  (signature lambda ((string? s) (integer? start) (integer? end)) boolean?)
  (tags pure))
 ((name . "make-kmp-restart-vector")
  (signature lambda ((string? s)) vector?)
  (tags pure))
 ((name . "make-kmp-restart-vector")
  (signature lambda ((string? s) (procedure? c=)) vector?)
  (subsigs (c= (lambda ((char? a) (char? b)) boolean?)))
  (tags pure))
 ((name . "make-kmp-restart-vector")
  (signature lambda ((string? s) (procedure? c=) (integer? start)) vector?)
  (subsigs (c= (lambda ((char? a) (char? b)) boolean?)))
  (tags pure))
 ((name . "make-kmp-restart-vector")
  (signature
   lambda
   ((string? s) (procedure? c=) (integer? start) (integer? end))
   vector?)
  (subsigs (c= (lambda ((char? a) (char? b)) boolean?)))
  (tags pure))
 ((name . "kmp-step")
  (signature
   lambda
   ((string? pat)
    (vector? rv)
    (char? c)
    (integer? i)
    (procedure? c=)
    (integer? p-start))
   integer?)
  (subsigs (c= (lambda ((char? a) (char? b)) boolean?)))
  (tags pure))
 ((name . "string-kmp-partial-search")
  (signature
   lambda
   ((string? pat) (vector? rv) (string? s) (integer? i))
   integer?)
  (tags pure))
 ((name . "string-kmp-partial-search")
  (signature
   lambda
   ((string? pat) (vector? rv) (string? s) (integer? i) (procedure? c=))
   integer?)
  (subsigs (c= (lambda ((char? a) (char? b)) boolean?)))
  (tags pure))
 ((name . "string-kmp-partial-search")
  (signature
   lambda
   ((string? pat)
    (vector? rv)
    (string? s)
    (integer? i)
    (procedure? c=)
    (integer? p-start))
   integer?)
  (subsigs (c= (lambda ((char? a) (char? b)) boolean?)))
  (tags pure))
 ((name . "string-kmp-partial-search")
  (signature
   lambda
   ((string? pat)
    (vector? rv)
    (string? s)
    (integer? i)
    (procedure? c=)
    (integer? p-start)
    (integer? s-start))
   integer?)
  (subsigs (c= (lambda ((char? a) (char? b)) boolean?)))
  (tags pure))
 ((name . "string-kmp-partial-search")
  (signature
   lambda
   ((string? pat)
    (vector? rv)
    (string? s)
    (integer? i)
    (procedure? c=)
    (integer? p-start)
    (integer? s-start)
    (integer? s-end))
   integer?)
  (subsigs (c= (lambda ((char? a) (char? b)) boolean?)))
  (tags pure)))
