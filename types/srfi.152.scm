(((name . "string?")
  (signature case-lambda ((obj) boolean?) ((obj) boolean?))
  (tags pure predicate))
 ((name . "string-null?")
  (signature lambda ((string? string)) boolean?)
  (tags pure))
 ((name . "string-every")
  (signature
   case-lambda
   (((procedure? pred) (string? string)) *)
   (((procedure? pred) (string? string) (integer? start)) *)
   (((procedure? pred) (string? string) (integer? start) (integer? end)) *))
  (subsigs (pred (lambda ((char? char)) *)))
  (tags pure))
 ((name . "string-any")
  (signature
   case-lambda
   (((procedure? pred) (string? string)) *)
   (((procedure? pred) (string? string) (integer? start)) *)
   (((procedure? pred) (string? string) (integer? start) (integer? end)) *))
  (subsigs (pred (lambda ((char? char)) *)))
  (tags pure))
 ((name . "make-string")
  (signature lambda ((integer? len) (char? char)) string?)
  (tags pure))
 ((name . "string") (signature lambda ((char? char) ...) string?) (tags pure))
 ((name . "string-tabulate")
  (signature lambda ((procedure? proc) (integer? len)) string?)
  (subsigs (proc (lambda ((integer? k)) char?)))
  (tags pure))
 ((name . "string-unfold")
  (signature
   case-lambda
   (((procedure? stop?) (procedure? mapper) (procedure? successor) seed)
    string?)
   (((procedure? stop?)
     (procedure? mapper)
     (procedure? successor)
     seed
     (string? base))
    string?)
   (((procedure? stop?)
     (procedure? mapper)
     (procedure? successor)
     seed
     (string? base)
     (procedure? make-final))
    string?))
  (subsigs
   (stop? (lambda (seed) boolean?))
   (mapper (lambda (seed) (or char? string?)))
   (success (lambda (seed) *))
   (make-final (lambda (seed) (or char? string?))))
  (tags pure))
 ((name . "string-unfold-right")
  (signature
   case-lambda
   (((procedure? stop?) (procedure? mapper) (procedure? successor) seed)
    string?)
   (((procedure? stop?)
     (procedure? mapper)
     (procedure? successor)
     seed
     (string? base))
    string?)
   (((procedure? stop?)
     (procedure? mapper)
     (procedure? successor)
     seed
     (string? base)
     (procedure? make-final))
    string?))
  (subsigs
   (stop? (lambda (seed) boolean?))
   (mapper (lambda (seed) (or char? string?)))
   (success (lambda (seed) *))
   (make-final (lambda (seed) (or char? string?))))
  (tags pure))
 ((name . "string->vector")
  (signature
   case-lambda
   (((string? string)) vector?)
   (((string? string) (integer? start)) vector?)
   (((string? string) (integer? start) (integer? end)) vector?))
  (tags pure))
 ((name . "string->list")
  (signature
   case-lambda
   (((string? string)) list?)
   (((string? string) (integer? start)) list?)
   (((string? string) (integer? start) (integer? end)) list?))
  (tags pure))
 ((name . "vector->string")
  (signature
   case-lambda
   (((vector? vector)) string?)
   (((vector? vector) (integer? start)) string?)
   (((vector? vector) (integer? start) (integer? end)) string?))
  (tags pure))
 ((name . "list->string")
  (signature lambda ((list? list)) string?)
  (tags pure))
 ((name . "reverse-list->string")
  (signature lambda ((list? char-list)) string?)
  (tags pure))
 ((name . "string-length")
  (signature lambda ((string? string)) integer?)
  (tags pure))
 ((name . "string-ref")
  (signature lambda ((string? string) (integer? idx)) char?)
  (tags pure))
 ((name . "substring")
  (signature lambda ((string? string) (integer? start) (integer? end)) string?)
  (tags pure))
 ((name . "string-copy")
  (signature
   case-lambda
   (((string? string)) string?)
   (((string? string) (integer? start)) string?)
   (((string? string) (integer? start) (integer? end)) string?))
  (tags pure))
 ((name . "string-take")
  (signature lambda ((string? string) (integer? nchars)) string?)
  (tags pure))
 ((name . "string-drop")
  (signature lambda ((string? string) (integer? nchars)) string?)
  (tags pure))
 ((name . "string-take-right")
  (signature lambda ((string? string) (integer? nchars)) string?)
  (tags pure))
 ((name . "string-drop-right")
  (signature lambda ((string? string) (integer? nchars)) string?)
  (tags pure))
 ((name . "string-pad")
  (signature
   case-lambda
   (((string? string) (integer? len)) string?)
   (((string? string) (integer? len) (char? char)) string?)
   (((string? string) (integer? len) (char? char) (integer? start)) string?)
   (((string? string)
     (integer? len)
     (char? char)
     (integer? start)
     (integer? end))
    string?))
  (tags pure))
 ((name . "string-pad-right")
  (signature
   case-lambda
   (((string? string) (integer? len)) string?)
   (((string? string) (integer? len) (char? char)) string?)
   (((string? string) (integer? len) (char? char) (integer? start)) string?)
   (((string? string)
     (integer? len)
     (char? char)
     (integer? start)
     (integer? end))
    string?))
  (tags pure))
 ((name . "string-trim")
  (signature
   case-lambda
   (((string? string)) string?)
   (((string? string) (procedure? pred)) string?)
   (((string? string) (procedure? pred) (integer? start)) string?)
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    string?))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "string-trim-right")
  (signature
   case-lambda
   (((string? string)) string?)
   (((string? string) (procedure? pred)) string?)
   (((string? string) (procedure? pred) (integer? start)) string?)
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    string?))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "string-trim-both")
  (signature
   case-lambda
   (((string? string)) string?)
   (((string? string) (procedure? pred)) string?)
   (((string? string) (procedure? pred) (integer? start)) string?)
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    string?))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "string-replace")
  (signature
   case-lambda
   (((string? string1) (string? string2) (integer? start1) (integer? end1))
    string?)
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    string?)
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    string?))
  (tags pure))
 ((name . "string=?")
  (signature
   lambda
   ((string? string1) (string? string2) (string? string3) ...)
   boolean?)
  (tags pure))
 ((name . "string<?")
  (signature
   lambda
   ((string? string1) (string? string2) (string? string3) ...)
   boolean?)
  (tags pure))
 ((name . "string>?")
  (signature
   lambda
   ((string? string1) (string? string2) (string? string3) ...)
   boolean?)
  (tags pure))
 ((name . "string<=?")
  (signature
   lambda
   ((string? string1) (string? string2) (string? string3) ...)
   boolean?)
  (tags pure))
 ((name . "string>=?")
  (signature
   lambda
   ((string? string1) (string? string2) (string? string3) ...)
   boolean?)
  (tags pure))
 ((name . "string-ci=?")
  (signature
   lambda
   ((string? string1) (string? string2) (string? string3) ...)
   boolean?)
  (tags pure))
 ((name . "string-ci<?")
  (signature
   lambda
   ((string? string1) (string? string2) (string? string3) ...)
   boolean?)
  (tags pure))
 ((name . "string-ci>?")
  (signature
   lambda
   ((string? string1) (string? string2) (string? string3) ...)
   boolean?)
  (tags pure))
 ((name . "string-ci<=?")
  (signature
   lambda
   ((string? string1) (string? string2) (string? string3) ...)
   boolean?)
  (tags pure))
 ((name . "string-ci>=?")
  (signature
   lambda
   ((string? string1) (string? string2) (string? string3) ...)
   boolean?)
  (tags pure))
 ((name . "string-prefix-length")
  (signature
   case-lambda
   (((string? string1) (string? string2)) integer?)
   (((string? string1) (string? string2) (integer? start1)) integer?)
   (((string? string1) (string? string2) (integer? start1) (integer? end1))
    integer?)
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    integer?)
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    integer?))
  (tags pure))
 ((name . "string-suffix-length")
  (signature
   case-lambda
   (((string? string1) (string? string2)) integer?)
   (((string? string1) (string? string2) (integer? start1)) integer?)
   (((string? string1) (string? string2) (integer? start1) (integer? end1))
    integer?)
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    integer?)
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    integer?))
  (tags pure))
 ((name . "string-prefix?")
  (signature
   case-lambda
   (((string? string1) (string? string2)) boolean?)
   (((string? string1) (string? string2) (integer? start1)) boolean?)
   (((string? string1) (string? string2) (integer? start1) (integer? end1))
    boolean?)
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    boolean?)
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    boolean?))
  (tags pure))
 ((name . "string-suffix?")
  (signature
   case-lambda
   (((string? string1) (string? string2)) boolean?)
   (((string? string1) (string? string2) (integer? start1)) boolean?)
   (((string? string1) (string? string2) (integer? start1) (integer? end1))
    boolean?)
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    boolean?)
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    boolean?))
  (tags pure))
 ((name . "string-index")
  (signature
   case-lambda
   (((string? string) (procedure? pred)) (or #f integer?))
   (((string? string) (procedure? pred) (integer? start)) (or #f integer?))
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    (or #f integer?)))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "string-index-right")
  (signature
   case-lambda
   (((string? string) (procedure? pred)) (or #f integer?))
   (((string? string) (procedure? pred) (integer? start)) (or #f integer?))
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    (or #f integer?)))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "string-skip")
  (signature
   case-lambda
   (((string? string) (procedure? pred)) (or #f integer?))
   (((string? string) (procedure? pred) (integer? start)) (or #f integer?))
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    (or #f integer?)))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "string-skip-right")
  (signature
   case-lambda
   (((string? string) (procedure? pred)) (or #f integer?))
   (((string? string) (procedure? pred) (integer? start)) (or #f integer?))
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    (or #f integer?)))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "string-contains")
  (signature
   case-lambda
   (((string? string1) (string? string2)) (or #f integer?))
   (((string? string1) (string? string2) (integer? start1)) (or #f integer?))
   (((string? string1) (string? string2) (integer? start1) (integer? end1))
    (or #f integer?))
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    (or #f integer?))
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    (or #f integer?)))
  (tags pure))
 ((name . "string-contains-right")
  (signature
   case-lambda
   (((string? string1) (string? string2)) (or #f integer?))
   (((string? string1) (string? string2) (integer? start1)) (or #f integer?))
   (((string? string1) (string? string2) (integer? start1) (integer? end1))
    (or #f integer?))
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2))
    (or #f integer?))
   (((string? string1)
     (string? string2)
     (integer? start1)
     (integer? end1)
     (integer? start2)
     (integer? end2))
    (or #f integer?)))
  (tags pure))
 ((name . "string-take-while")
  (signature
   case-lambda
   (((string? string) (procedure? pred)) string?)
   (((string? string) (procedure? pred) (integer? start)) string?)
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    string?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-take-while-right")
  (signature
   case-lambda
   (((string? string) (procedure? pred)) string?)
   (((string? string) (procedure? pred) (integer? start)) string?)
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    string?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-drop-while")
  (signature
   case-lambda
   (((string? string) (procedure? pred)) string?)
   (((string? string) (procedure? pred) (integer? start)) string?)
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    string?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-drop-while-right")
  (signature
   case-lambda
   (((string? string) (procedure? pred)) string?)
   (((string? string) (procedure? pred) (integer? start)) string?)
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    string?))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-span")
  (signature
   case-lambda
   (((string? string) (procedure? pred)) (values string? string))
   (((string? string) (procedure? pred) (integer? start))
    (values string? string))
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    (values string? string)))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-break")
  (signature
   case-lambda
   (((string? string) (procedure? pred)) (values string? string))
   (((string? string) (procedure? pred) (integer? start))
    (values string? string))
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    (values string? string)))
  (subsigs (pred (lambda ((char? c)) boolean?)))
  (tags pure))
 ((name . "string-append")
  (signature lambda ((string? string) ...) string?)
  (tags pure))
 ((name . "string-concatenate")
  (signature lambda ((list? string-list)) string?)
  (tags pure))
 ((name . "string-concatenate-reverse")
  (signature
   case-lambda
   (((list? string-list)) string?)
   (((list? string-list) (string? final-string)) string?)
   (((list? string-list) (string? final-string) (integer? end)) string?))
  (tags pure))
 ((name . "string-join")
  (signature
   case-lambda
   (((list? string-list)) string?)
   (((list? string-list) (string? delimiter)) string?)
   (((list? string-list) (string? delimiter) (symbol? grammar)) string?))
  (tags pure)
  (spec-values
   (grammar
    ("'infix"
     "infix or separator grammar: insert the delimiter between list elements. An empty list will produce an empty string.")
    ("'strict-infix"
     "same as 'infix if the string-list is non-empty, but will signal an error if given an empty list. (This avoids an ambiguity)")
    ("'suffix"
     "suffix or terminator grammar: insert the delimiter after every list element.")
    ("'prefix"
     "prefix grammar: insert the delimiter before every list element."))))
 ((name . "string-fold")
  (signature
   case-lambda
   (((procedure? kons) knil (string? string)) *)
   (((procedure? kons) knil (string? string) (integer? start)) *)
   (((procedure? kons) knil (string? string) (integer? start) (integer? end))
    *))
  (subsigs (kons (lambda ((char? char) state) *)))
  (tags pure))
 ((name . "string-fold-right")
  (signature
   case-lambda
   (((procedure? kons) knil (string? string)) *)
   (((procedure? kons) knil (string? string) (integer? start)) *)
   (((procedure? kons) knil (string? string) (integer? start) (integer? end))
    *))
  (subsigs (kons (lambda ((char? char) state) *)))
  (tags pure))
 ((name . "string-map")
  (signature
   lambda
   ((procedure? proc) (string? string1) (string? string2) ...)
   string?)
  (subsigs
   (proc (lambda ((char? char1) (char? char2) ...) (or string? char?))))
  (tags pure))
 ((name . "string-for-each")
  (signature
   lambda
   ((procedure? proc) (string? string1) (string? string2) ...)
   undefined)
  (subsigs (proc (lambda ((char? char1) (char? char2) ...) undefined))))
 ((name . "string-count")
  (signature
   case-lambda
   (((string? string) (procedure? pred)) integer?)
   (((string? string) (procedure? pred) (integer? start)) integer?)
   (((string? string) (procedure? pred) (integer? start) (integer? end))
    integer?))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "string-filter")
  (signature
   case-lambda
   (((procedure? pred) (string? string)) string?)
   (((procedure? pred) (string? string) (integer? start)) string?)
   (((procedure? pred) (string? string) (integer? start) (integer? end))
    string?))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "string-remove")
  (signature
   case-lambda
   (((procedure? pred) (string? string)) string?)
   (((procedure? pred) (string? string) (integer? start)) string?)
   (((procedure? pred) (string? string) (integer? start) (integer? end))
    string?))
  (subsigs (pred (lambda ((char? char)) boolean?)))
  (tags pure))
 ((name . "string-replicate")
  (signature
   case-lambda
   (((string? string) (integer? from) (integer? to)) string?)
   (((string? string) (integer? from) (integer? to) (integer? start)) string?)
   (((string? string)
     (integer? from)
     (integer? to)
     (integer? start)
     (integer? end))
    string?))
  (tags pure))
 ((name . "string-segment")
  (signature lambda ((string? string) (integer? k)) list?)
  (tags pure))
 ((name . "string-split")
  (signature
   case-lambda
   (((string? string) (string? delimiter)) list?)
   (((string? string) (string? delimiter) (symbol? grammar)) list?)
   (((string? string)
     (string? delimiter)
     (symbol? grammar)
     ((or #f integer?) limit))
    list?)
   (((string? string)
     (string? delimiter)
     (symbol? grammar)
     ((or #f integer?) limit)
     (integer? start))
    list?)
   (((string? string)
     (string? delimiter)
     (symbol? grammar)
     ((or #f integer?) limit)
     (integer? start)
     (integer? end))
    list?))
  (tags pure)
  (spec-values
   (grammar
    ("'infix" "empty string produces empty list")
    ("'strict-infix" "empty string signals an error")
    ("'suffix" "leading empty string is suppressed")
    ("'prefix" "trailing empty string is suppressed"))))
 ((name . "read-string")
  (signature
   case-lambda
   (((integer? k)) (or eof-object? string?))
   (((integer? k) (input-port? port)) (or eof-object? string?))))
 ((name . "write-string")
  (signature
   case-lambda
   (((string? string)) undefined)
   (((string? string) (output-port? port)) undefined)
   (((string? string) (output-port? port) (integer? start)) undefined)
   (((string? string) (output-port? port) (integer? start) (integer? end))
    undefined)))
 ((name . "string-set!")
  (signature lambda ((string? string) (integer? k) (char? char)) undefined))
 ((name . "string-fill!")
  (signature
   case-lambda
   (((string? string) (char? fill)) undefined)
   (((string? string) (char? fill) (integer? start)) undefined)
   (((string? string) (char? fill) (integer? start) (integer? end))
    undefined)))
 ((name . "string-copy!")
  (signature
   case-lambda
   (((string? to) (integer? at) (string? from)) undefined)
   (((string? to) (integer? at) (string? from) (integer? start)) undefined)
   (((string? to) (integer? at) (string? from) (integer? start) (integer? end))
    undefined))))
