(((name . "&i/o") (signature value record-type-descriptor?))
 ((name . "make-i/o-error") (signature lambda () i/o-error?) (tags pure))
 ((name . "i/o-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes error?))
 ((name . "&i/o-read") (signature value record-type-descriptor?))
 ((name . "make-i/o-read-error")
  (signature lambda () i/o-read-error?)
  (tags pure))
 ((name . "i/o-read-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-error?))
 ((name . "&i/o-write") (signature value record-type-descriptor?))
 ((name . "make-i/o-write-error")
  (signature lambda () i/o-write-error?)
  (tags pure))
 ((name . "i/o-write-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-error?))
 ((name . "&i/o-invalid-position") (signature value record-type-descriptor?))
 ((name . "make-i/o-invalid-position-error")
  (signature lambda (position) i/o-invalid-position-error?)
  (tags pure))
 ((name . "i/o-invalid-position-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-error?))
 ((name . "i/o-error-position")
  (signature lambda ((i/o-invalid-position-error? condition)) *)
  (tags pure))
 ((name . "&i/o-filename") (signature value record-type-descriptor?))
 ((name . "make-i/o-filename-error")
  (signature lambda (filename) i/o-filename-error?)
  (tags pure))
 ((name . "i/o-filename-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-error?))
 ((name . "i/o-error-filename")
  (signature lambda ((i/o-filename-error? condition)) *)
  (tags pure))
 ((name . "&i/o-file-protection") (signature value record-type-descriptor?))
 ((name . "make-i/o-file-protection-error")
  (signature lambda (file) i/o-file-protection-error?)
  (tags pure))
 ((name . "i/o-file-protection-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-filename-error?))
 ((name . "&i/o-file-is-read-only") (signature value record-type-descriptor?))
 ((name . "make-i/o-file-is-read-only-error")
  (signature lambda (file) i/o-file-is-read-only-error?)
  (tags pure))
 ((name . "i/o-file-is-read-only-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-file-protection-error?))
 ((name . "&i/o-file-already-exists")
  (signature value record-type-descriptor?))
 ((name . "make-i/o-file-already-exists-error")
  (signature lambda (file) i/o-file-already-exists-error?)
  (tags pure))
 ((name . "i/o-file-already-exists-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-filename-error?))
 ((name . "&i/o-file-does-not-exist")
  (signature value record-type-descriptor?))
 ((name . "make-i/o-file-does-not-exist-error")
  (signature lambda (file) i/o-file-does-not-exist-error?)
  (tags pure))
 ((name . "i/o-file-does-not-exist-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-filename-error?))
 ((name . "&i/o-port") (signature value record-type-descriptor?))
 ((name . "make-i/o-port-error")
  (signature lambda ((port? port)) i/o-port-error?)
  (tags pure))
 ((name . "i/o-port-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-error?))
 ((name . "i/o-error-port")
  (signature lambda ((i/o-port-error? condition)) port?)
  (tags pure))
 ((name . "file-options")
  (signature syntax-rules () ((_ file-options-symbol ...) file-options))
  (spec-values
   (file-options-symbol
    ("no-create"
     "If the file does not already exist, it is not created; instead, an exception with condition type &i/o-file-does-not-exist is raised. If the file already exists, the exception with condition type &i/o-file-already-exists is not raised and the file is truncated to zero length.")
    ("no-fail"
     "If the file already exists, the exception with condition type &i/o-file-already-exists is not raised, even if no-create is not included, and the file is truncated to zero length.")
    ("no-truncate"
     "If the file already exists and the exception with condition type &i/o-file-already-exists has been inhibited by inclusion of no-create or no-fail, the file is not truncated, but the port's current position is still set to the beginning of the file."))))
 ((name . "buffer-mode")
  (signature syntax-rules () ((_ buffer-mode-symbol) buffer-mode?))
  (spec-values
   (buffer-mode-symbol
    ("none" "no buffering")
    ("line" "flush upon line endings and reading up to line endings")
    ("block" "arbitrary buffering"))))
 ((name . "buffer-mode?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes symbol?))
 ((name . "latin-1-codec") (signature lambda () codec) (tags pure))
 ((name . "utf8-codec") (signature lambda () codec) (tags pure))
 ((name . "utf16-codec") (signature lambda () codec) (tags pure))
 ((name . "eol-style")
  (signature syntax-rules () ((_ eol-style-symbol) symbol?))
  (spec-values
   (eol-style-symbol
    ("none" "")
    ("lf" "linefeed")
    ("cr" "carriage return")
    ("crlf" "carriage return linefeed")
    ("nel" "next line")
    ("crnel" "carriage return next line")
    ("ls" "line separator"))))
 ((name . "&i/o-decoding") (signature value record-type-descriptor?))
 ((name . "make-i/o-decoding-error")
  (signature lambda ((port? port)) i/o-decoding-error?)
  (tags pure))
 ((name . "i/o-decoding-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-port-error?))
 ((name . "&i/o-encoding") (signature value record-type-descriptor?))
 ((name . "make-i/o-encoding-error")
  (signature lambda ((port? port) (char? char)) i/o-encoding-error?)
  (tags pure))
 ((name . "i/o-encoding-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-port-error?))
 ((name . "i/o-encoding-error-char")
  (signature lambda ((i/o-encoding-error? condition)) char?)
  (tags pure))
 ((name . "error-handling-mode")
  (signature syntax-rules () ((_ error-handling-mode-symbol) symbol?))
  (spec-values
   (error-handling-mode-symbol
    ("ignore"
     "appropriate number of bytes of the invalid encoding are ignored and decoding continues with the following bytes")
    ("raise" "exception with condition type &i/o-decoding is raised")
    ("replace"
     "the replacement character U+FFFD is injected into the data stream, an appropriate number of bytes are ignored, and decoding continues with the following bytes"))))
 ((name . "make-transcoder") (signature lambda ((codec codec)) transcoder))
 ((name . "make-transcoder")
  (signature lambda ((codec codec) (symbol? eol-style)) transcoder))
 ((name . "make-transcoder")
  (signature
   lambda
   ((codec codec) (symbol? eol-style) (symbol? handling-mode))
   transcoder))
 ((name . "native-transcoder") (signature lambda () transcoder))
 ((name . "transcoder-codec")
  (signature lambda ((transcoder transcoder)) codec)
  (tags pure))
 ((name . "transcoder-eol-style")
  (signature lambda ((transcoder transcoder)) symbol?)
  (tags pure))
 ((name . "transcoder-error-handling-mode")
  (signature lambda ((transcoder transcoder)) symbol?)
  (tags pure))
 ((name . "bytevector->string")
  (signature lambda ((bytevector? bytevector) (transcoder transcoder)) string?)
  (tags pure))
 ((name . "string->bytevector")
  (signature lambda ((string? string) (transcoder transcoder)) bytevector?)
  (tags pure))
 ((name . "eof-object") (signature lambda () eof-object?) (tags pure))
 ((name . "eof-object?")
  (signature lambda (obj) boolean?)
  (tags pure predicate))
 ((name . "port?") (signature lambda (obj) boolean?) (tags pure predicate))
 ((name . "port-transcoder")
  (signature lambda ((port? port)) transcoder)
  (tags pure))
 ((name . "textual-port?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes port?))
 ((name . "binary-port?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes port?))
 ((name . "transcoded-port")
  (signature
   lambda
   ((binary-port? port) (transcoder transcoder))
   textual-port?))
 ((name . "port-has-port-position?")
  (signature lambda ((port? port)) boolean?)
  (tags pure))
 ((name . "port-position") (signature lambda ((binary-port? port)) integer?))
 ((name . "port-position")
  (signature lambda ((textual-port? port)) opaque-port-position))
 ((name . "port-has-set-port-position!?")
  (signature lambda ((port? port)) boolean?)
  (tags pure))
 ((name . "set-port-position!")
  (signature lambda ((binary-port? port) (integer? pos)) undefined))
 ((name . "set-port-position!")
  (signature
   lambda
   ((textual-port? port) (opaque-port-position pos))
   undefined))
 ((name . "close-port") (signature lambda ((port? port)) undefined))
 ((name . "call-with-port")
  (signature lambda ((port? port) (procedure? proc)) *)
  (subsigs (proc (lambda ((port? port)) *))))
 ((name . "input-port?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes port?))
 ((name . "port-eof?") (signature lambda ((input-port? port)) boolean?))
 ((name . "open-file-input-port")
  (signature lambda ((string? string)) input-port?))
 ((name . "open-file-input-port")
  (signature lambda ((string? string) (file-options options)) input-port?))
 ((name . "open-file-input-port")
  (signature
   lambda
   ((string? string) (file-options options) (buffer-mode? buffer-mode))
   input-port?))
 ((name . "open-file-input-port")
  (signature
   lambda
   ((string? string)
    (file-options options)
    (buffer-mode? buffer-mode)
    ((or #f transcoder) transcoder))
   input-port?))
 ((name . "open-bytevector-input-port")
  (signature lambda ((bytevector? bytevector)) input-port?))
 ((name . "open-bytevector-input-port")
  (signature
   lambda
   ((bytevector? bytevector) ((or #f transcoder) transcoder))
   input-port?))
 ((name . "open-string-input-port")
  (signature lambda ((string? string)) input-port?))
 ((name . "standard-input-port") (signature lambda () binary-port?))
 ((name . "current-input-port") (signature lambda () textual-port?))
 ((name . "make-custom-binary-input-port")
  (signature
   lambda
   ((string? id)
    (procedure? read!)
    ((or #f procedure?) get-position)
    ((or #f procedure?) set-position!)
    ((or #f procedure?) close))
   input-port?)
  (subsigs
   (read!
    (lambda ((bytevector? bytevector) (integer? start) (integer? count))
      integer?))
   (get-position (lambda () integer?))
   (set-position! (lambda ((integer? position)) undefined))
   (close (lambda () undefined))))
 ((name . "make-custom-textual-input-port")
  (signature
   lambda
   ((string? id)
    (procedure? read!)
    ((or #f procedure?) get-position)
    ((or #f procedure?) set-position!)
    ((or #f procedure?) close))
   input-port?)
  (subsigs
   (read!
    (lambda ((string? string) (integer? start) (integer? count)) integer?))
   (get-position (lambda () opaque-port-position))
   (set-position! (lambda ((opaque-port-position position)) undefined))
   (close (lambda () undefined))))
 ((name . "get-u8")
  (signature lambda ((input-port? input-port)) (or eof-object? integer?)))
 ((name . "lookahead-u8")
  (signature lambda ((input-port? input-port)) (or eof-object? integer?)))
 ((name . "get-bytevector-n")
  (signature
   lambda
   ((input-port? input-port) (integer? count))
   (or eof-object? bytevector?)))
 ((name . "get-bytevector-n!")
  (signature
   lambda
   ((input-port? input-port)
    (bytevector? bytevector)
    (integer? start)
    (integer? count))
   (or integer? eof-object?)))
 ((name . "get-bytevector-some")
  (signature lambda ((input-port? input-port)) (or bytevector? eof-object?)))
 ((name . "get-bytevector-all")
  (signature lambda ((input-port? input-port)) (or bytevector? eof-object?)))
 ((name . "get-char")
  (signature lambda ((input-port? input-port)) (or eof-object? char?)))
 ((name . "lookahead-char")
  (signature lambda ((input-port? input-port)) (or eof-object? char?)))
 ((name . "get-string-n")
  (signature
   lambda
   ((input-port? input-port) (integer? count))
   (or eof-object? string?)))
 ((name . "get-string-n!")
  (signature
   lambda
   ((input-port? input-port)
    (string? string)
    (integer? start)
    (integer? count))
   (or eof-object? integer?)))
 ((name . "get-string-all")
  (signature lambda ((input-port? input-port)) (or eof-object? string?)))
 ((name . "get-line")
  (signature lambda ((input-port? input-port)) (or eof-object? string?)))
 ((name . "get-datum") (signature lambda ((input-port? input-port)) *))
 ((name . "output-port?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes port?))
 ((name . "flush-output-port")
  (signature lambda ((output-port? port)) undefined))
 ((name . "output-port-buffer-mode")
  (signature lambda ((output-port? port)) buffer-mode?))
 ((name . "open-file-output-port")
  (signature lambda ((string? filename)) output-port?))
 ((name . "open-file-output-port")
  (signature
   lambda
   ((string? filename) (file-options file-options))
   output-port?))
 ((name . "open-file-output-port")
  (signature
   lambda
   ((string? filename) (file-options file-options) (buffer-mode? buffer-mode))
   output-port?))
 ((name . "open-file-output-port")
  (signature
   lambda
   ((string? filename)
    (file-options file-options)
    (buffer-mode? buffer-mode)
    ((or transcoder #f) maybe-transcoder))
   output-port?))
 ((name . "open-bytevector-output-port")
  (signature lambda () (values output-port? procedure?))
  (subsigs (return (lambda () bytevector?))))
 ((name . "open-bytevector-output-port")
  (signature
   lambda
   (((or #f transcoder) maybe-transcoder))
   (values output-port? procedure?))
  (subsigs (return (lambda () bytevector?))))
 ((name . "call-with-bytevector-output-port")
  (signature lambda ((procedure? proc)) bytevector?)
  (subsigs (proc (lambda ((output-port? port)) *))))
 ((name . "call-with-bytevector-output-port")
  (signature
   lambda
   ((procedure? proc) ((or #f transcoder) maybe-transcoder))
   bytevector?)
  (subsigs (proc (lambda ((output-port? port)) *))))
 ((name . "open-string-output-port")
  (signature lambda () (values output-port? procedure?))
  (subsigs (return (lambda () string?))))
 ((name . "call-with-string-output-port")
  (signature lambda ((procedure? proc)) string?)
  (subsigs (proc (lambda ((output-port? port)) *))))
 ((name . "standard-output-port") (signature lambda () output-port?))
 ((name . "standard-error-port") (signature lambda () output-port?))
 ((name . "make-custom-binary-output-port")
  (signature
   lambda
   ((string? id)
    (procedure? write!)
    ((or #f procedure?) get-position)
    ((or #f procedure?) set-position!)
    ((or #f procedure?) close))
   output-port?)
  (subsigs
   (write!
    (lambda ((bytevector? bytevector) (integer? start) (integer? count))
      integer?))
   (get-position (lambda () integer?))
   (set-position! (lambda ((integer? position)) undefined))
   (close (lambda () undefined))))
 ((name . "make-custom-textual-output-port")
  (signature
   lambda
   ((string? id)
    (procedure? write!)
    ((or #f procedure?) get-position)
    ((or #f procedure?) set-position!)
    ((or #f procedure?) close))
   output-port?)
  (subsigs
   (write!
    (lambda ((string? string) (integer? start) (integer? count)) integer?))
   (get-position (lambda () integer?))
   (set-position! (lambda ((integer? position)) undefined))
   (close (lambda () undefined))))
 ((name . "put-u8")
  (signature lambda ((output-port? port) (integer? octet)) undefined))
 ((name . "put-bytevector")
  (signature lambda ((output-port? port) (bytevector? bytevector)) undefined))
 ((name . "put-bytevector")
  (signature
   lambda
   ((output-port? port) (bytevector? bytevector) (integer? start))
   undefined))
 ((name . "put-bytevector")
  (signature
   lambda
   ((output-port? port)
    (bytevector? bytevector)
    (integer? start)
    (integer? count))
   undefined))
 ((name . "put-char")
  (signature lambda ((output-port? port) (char? char)) undefined))
 ((name . "put-string")
  (signature lambda ((output-port? port) (string? string)) undefined))
 ((name . "put-string")
  (signature
   lambda
   ((output-port? port) (string? string) (integer? start))
   undefined))
 ((name . "put-string")
  (signature
   lambda
   ((output-port? port) (string? string) (integer? start) (integer? count))
   undefined))
 ((name . "put-datum")
  (signature lambda ((output-port? port) datum) undefined))
 ((name . "open-file-input/output-port")
  (signature lambda ((string? string)) port?))
 ((name . "open-file-input/output-port")
  (signature lambda ((string? string) (file-options options)) port?))
 ((name . "open-file-input/output-port")
  (signature
   lambda
   ((string? string) (file-options options) (buffer-mode? buffer-mode))
   port?))
 ((name . "open-file-input/output-port")
  (signature
   lambda
   ((string? string)
    (file-options options)
    (buffer-mode? buffer-mode)
    ((or #f transcoder) transcoder))
   port?))
 ((name . "make-custom-binary-input/output-port")
  (signature
   lambda
   ((string? id)
    (procedure? read!)
    (procedure? write!)
    ((or #f procedure?) get-position)
    ((or #f procedure?) set-position!)
    ((or #f procedure?) close))
   port?)
  (subsigs
   (read!
    (lambda ((bytevector? bytevector) (integer? start) (integer? count))
      integer?))
   (write!
    (lambda ((bytevector? bytevector) (integer? start) (integer? count))
      integer?))
   (get-position (lambda () integer?))
   (set-position! (lambda ((integer? position)) undefined))
   (close (lambda () undefined))))
 ((name . "make-custom-textual-input/output-port")
  (signature
   lambda
   ((string? id)
    (procedure? read!)
    (procedure? write!)
    ((or #f procedure?) get-position)
    ((or #f procedure?) set-position!)
    ((or #f procedure?) close))
   port?)
  (subsigs
   (read!
    (lambda ((string? string) (integer? start) (integer? count)) integer?))
   (write!
    (lambda ((string? string) (integer? start) (integer? count)) integer?))
   (get-position (lambda () opaque-port-position))
   (set-position! (lambda ((opaque-port-position position)) undefined))
   (close (lambda () undefined)))))
