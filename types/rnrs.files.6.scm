(((name . "&i/o") (signature value record-type-descriptor?))
 ((name . "make-i/o-error") (signature lambda () i/o-error?) (tags pure))
 ((name . "i/o-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes error?))
 ((name . "&i/o-read") (signature value record-type-descriptor?))
 ((name . "make-i/o-read-error")
  (signature lambda () i/o-read-error?)
  (tags pure))
 ((name . "i/o-read-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-error?))
 ((name . "&i/o-write") (signature value record-type-descriptor?))
 ((name . "make-i/o-write-error")
  (signature lambda () i/o-write-error?)
  (tags pure))
 ((name . "i/o-write-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-error?))
 ((name . "&i/o-invalid-position") (signature value record-type-descriptor?))
 ((name . "make-i/o-invalid-position-error")
  (signature lambda (position) i/o-invalid-position-error?)
  (tags pure))
 ((name . "i/o-invalid-position-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-error?))
 ((name . "i/o-error-position")
  (signature lambda ((i/o-invalid-position-error? condition)) *)
  (tags pure))
 ((name . "&i/o-filename") (signature value record-type-descriptor?))
 ((name . "make-i/o-filename-error")
  (signature lambda (filename) i/o-filename-error?)
  (tags pure))
 ((name . "i/o-filename-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-error?))
 ((name . "i/o-error-filename")
  (signature lambda ((i/o-filename-error? condition)) *)
  (tags pure))
 ((name . "&i/o-file-protection") (signature value record-type-descriptor?))
 ((name . "make-i/o-file-protection-error")
  (signature lambda (file) i/o-file-protection-error?)
  (tags pure))
 ((name . "i/o-file-protection-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-filename-error?))
 ((name . "&i/o-file-is-read-only") (signature value record-type-descriptor?))
 ((name . "make-i/o-file-is-read-only-error")
  (signature lambda (file) i/o-file-is-read-only-error?)
  (tags pure))
 ((name . "i/o-file-is-read-only-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-file-protection-error?))
 ((name . "&i/o-file-already-exists")
  (signature value record-type-descriptor?))
 ((name . "make-i/o-file-already-exists-error")
  (signature lambda (file) i/o-file-already-exists-error?)
  (tags pure))
 ((name . "i/o-file-already-exists-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-filename-error?))
 ((name . "&i/o-file-does-not-exist")
  (signature value record-type-descriptor?))
 ((name . "make-i/o-file-does-not-exist-error")
  (signature lambda (file) i/o-file-does-not-exist-error?)
  (tags pure))
 ((name . "i/o-file-does-not-exist-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-filename-error?))
 ((name . "&i/o-port") (signature value record-type-descriptor?))
 ((name . "make-i/o-port-error")
  (signature lambda ((port? port)) i/o-port-error?)
  (tags pure))
 ((name . "i/o-port-error?")
  (signature lambda (obj) boolean?)
  (tags pure predicate)
  (supertypes i/o-error?))
 ((name . "i/o-error-port")
  (signature lambda ((i/o-port-error? condition)) port?)
  (tags pure))
 ((name . "file-exists?") (signature lambda ((string? filename)) boolean?))
 ((name . "delete-file") (signature lambda ((string? filename)) undefined)))
