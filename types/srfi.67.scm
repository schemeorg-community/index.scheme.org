(((name . "boolean-compare")
  (signature lambda ((boolean? bool1) (boolean? bool2)) integer?)
  (tags pure))
 ((name . "char-compare")
  (signature lambda ((char? char1) (char? char2)) integer?)
  (tags pure))
 ((name . "char-compare-ci")
  (signature lambda ((char? char1) (char? char2)) integer?)
  (tags pure))
 ((name . "string-compare")
  (signature lambda ((string? string1) (string? string2)) integer?)
  (tags pure))
 ((name . "string-compare-ci")
  (signature lambda ((string? string1) (string? string2)) integer?)
  (tags pure))
 ((name . "symbol-compare")
  (signature lambda ((symbol? symbol1) (symbol? symbol2)) integer?)
  (tags pure))
 ((name . "integer-compare")
  (signature lambda ((integer? integer1) (integer? integer2)) integer?)
  (tags pure))
 ((name . "rational-compare")
  (signature lambda ((rational? rational1) (rational? rational2)) integer?)
  (tags pure))
 ((name . "real-compare")
  (signature lambda ((real? real1) (real? real2)) integer?)
  (tags pure))
 ((name . "complex-compare")
  (signature lambda ((complex? complex1) (complex? complex2)) integer?)
  (tags pure))
 ((name . "number-compare")
  (signature lambda ((number? number1) (number? number2)) integer?)
  (tags pure))
 ((name . "vector-compare")
  (signature
   case-lambda
   (((vector? x) (vector? y)) integer?)
   (((procedure? compare) (vector? x) (vector? y)) integer?)
   ((x y (procedure? size) (procedure? ref)) integer?)
   (((procedure? compare) x y (procedure? size) (procedure? ref)) integer?))
  (subsigs
   (compare (lambda (el1 el2) integer?))
   (size (lambda (seq) integer?))
   (ref (lambda (seq index) *)))
  (tags pure))
 ((name . "vector-compare-as-list")
  (signature
   case-lambda
   (((vector? x) (vector? y)) integer?)
   (((procedure? compare) (vector? x) (vector? y)) integer?)
   ((x y (procedure? size) (procedure? ref)) integer?)
   (((procedure? compare) x y (procedure? size) (procedure? ref)) integer?))
  (subsigs
   (compare (lambda (el1 el2) integer?))
   (size (lambda (seq) integer?))
   (ref (lambda (seq index) *)))
  (tags pure))
 ((name . "list-compare")
  (signature
   case-lambda
   (((list? x) (list? y)) integer?)
   (((procedure? compare) (list? x) (list? y)) integer?)
   ((x y (procedure? empty?) (procedure? head) (procedure? tail)) integer?)
   (((procedure? compare)
     x
     y
     (procedure? empty?)
     (procedure? head)
     (procedure? tail))
    integer?))
  (subsigs
   (compare (lambda (el1 el2) integer?))
   (empty? (lambda (seq) boolean?))
   (head (lambda (seq) *))
   (tail (lambda (seq) *)))
  (tags pure))
 ((name . "list-compare-as-vector")
  (signature
   case-lambda
   (((list? x) (list? y)) integer?)
   (((procedure? compare) (list? x) (list? y)) integer?)
   ((x y (procedure? empty?) (procedure? head) (procedure? tail)) integer?)
   (((procedure? compare)
     x
     y
     (procedure? empty?)
     (procedure? head)
     (procedure? tail))
    integer?))
  (subsigs
   (compare (lambda (el1 el2) integer?))
   (empty? (lambda (seq) boolean?))
   (head (lambda (seq) *))
   (tail (lambda (seq) *)))
  (tags pure))
 ((name . "pair-compare-car")
  (signature lambda ((procedure? compare)) procedure?)
  (subsigs
   (compare (lambda (x y) integer?))
   (return (lambda ((pair? p1) (pair? p2)) integer?)))
  (tags pure))
 ((name . "pair-compare-cdr")
  (signature lambda ((procedure? compare)) procedure?)
  (subsigs
   (compare (lambda (x y) integer?))
   (return (lambda ((pair? p1) (pair? p2)) integer?)))
  (tags pure))
 ((name . "pair-compare")
  (signature
   case-lambda
   (((procedure? compare-car)
     (procedure? compare-cdr)
     (pair? pair1)
     (pair? pair2))
    integer?)
   ((obj1 obj2) integer?)
   (((procedure? compare) obj1 obj2) integer?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "default-compare")
  (signature lambda (obj1 obj2) integer?)
  (tags pure))
 ((name . "refine-compare")
  (signature syntax-rules () ((_ compare-expression ...) integer?))
  (subsigs (compare-expression (value integer?))))
 ((name . "select-compare")
  (signature
   syntax-rules
   (else)
   ((_ x y (type? c1 ...) ...) integer?)
   ((_ x y (type? c1 ...) ... (else c1 ...)) integer?))
  (subsigs (c (value integer?)) (type? (value procedure?))))
 ((name . "cond-compare")
  (signature
   syntax-rules
   (else)
   ((_ x y ((t1 t2) c1 ...) ...) integer?)
   ((_ x y ((t1 t2) c1 ...) ... (else c1 ...)) integer?))
  (subsigs
   (t (value boolean?))
   (c (value integer?))
   (type? (value procedure?))))
 ((name . "if3")
  (signature syntax-rules () ((_ c less equal greater)))
  (subsigs (c (value integer?))))
 ((name . "if=?")
  (signature syntax-rules () ((_ c consequent)) ((_ c consequent alternate)))
  (subsigs (c (value integer?))))
 ((name . "if<?")
  (signature syntax-rules () ((_ c consequent)) ((_ c consequent alternate)))
  (subsigs (c (value integer?))))
 ((name . "if>?")
  (signature syntax-rules () ((_ c consequent)) ((_ c consequent alternate)))
  (subsigs (c (value integer?))))
 ((name . "if<=?")
  (signature syntax-rules () ((_ c consequent)) ((_ c consequent alternate)))
  (subsigs (c (value integer?))))
 ((name . "if>=?")
  (signature syntax-rules () ((_ c consequent)) ((_ c consequent alternate)))
  (subsigs (c (value integer?))))
 ((name . "if-not=?")
  (signature syntax-rules () ((_ c consequent)) ((_ c consequent alternate)))
  (subsigs (c (value integer?))))
 ((name . "=?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y) boolean?)
   (((procedure? compare) x y) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "<?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y) boolean?)
   (((procedure? compare) x y) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . ">?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y) boolean?)
   (((procedure? compare) x y) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "<=?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y) boolean?)
   (((procedure? compare) x y) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . ">=?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y) boolean?)
   (((procedure? compare) x y) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "not=?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y) boolean?)
   (((procedure? compare) x y) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "</<?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y z) boolean?)
   (((procedure? compare) x y z) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "</<=?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y z) boolean?)
   (((procedure? compare) x y z) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "<=/<?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y z) boolean?)
   (((procedure? compare) x y z) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "<=/<=?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y z) boolean?)
   (((procedure? compare) x y z) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . ">/>?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y z) boolean?)
   (((procedure? compare) x y z) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . ">/>=?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y z) boolean?)
   (((procedure? compare) x y z) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . ">=/>?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y z) boolean?)
   (((procedure? compare) x y z) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . ">=/>=?")
  (signature
   case-lambda
   (() procedure?)
   (((procedure? compare)) procedure?)
   ((x y z) boolean?)
   (((procedure? compare) x y z) boolean?))
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "chain=?")
  (signature lambda ((procedure? compare) x1 ...) boolean?)
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "chain<?")
  (signature lambda ((procedure? compare) x1 ...) boolean?)
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "chain>?")
  (signature lambda ((procedure? compare) x1 ...) boolean?)
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "chain<=?")
  (signature lambda ((procedure? compare) x1 ...) boolean?)
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "chain>=?")
  (signature lambda ((procedure? compare) x1 ...) boolean?)
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "pairwise-not=?")
  (signature lambda ((procedure? compare) x1 ...) boolean?)
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "min-compare")
  (signature lambda ((procedure? compare) x1 x2 ...) *)
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "max-compare")
  (signature lambda ((procedure? compare) x1 x2 ...) *)
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "kth-largest")
  (signature lambda ((procedure? compare) (integer? k) x1 x2 ...) *)
  (subsigs (compare (lambda (x y) integer?)))
  (tags pure))
 ((name . "compare-by<")
  (signature
   case-lambda
   (((procedure? lt-pred)) procedure?)
   (((procedure? lt-pred) x y) integer?))
  (subsigs (lt-pred (lambda (x y) boolean?)))
  (tags pure))
 ((name . "compare-by>")
  (signature
   case-lambda
   (((procedure? gt-pred)) procedure?)
   (((procedure? gt-pred) x y) integer?))
  (subsigs (gt-pred (lambda (x y) boolean?)))
  (tags pure))
 ((name . "compare-by<=")
  (signature
   case-lambda
   (((procedure? le-pred)) procedure?)
   (((procedure? le-pred) x y) integer?))
  (subsigs (le-pred (lambda (x y) boolean?)))
  (tags pure))
 ((name . "compare-by>=")
  (signature
   case-lambda
   (((procedure? ge-pred)) procedure?)
   (((procedure? ge-pred) x y) integer?))
  (subsigs (ge-pred (lambda (x y) boolean?)))
  (tags pure))
 ((name . "compare-by=/<")
  (signature
   case-lambda
   (((procedure? eq-pred) (procedure? lt-pred)) procedure?)
   (((procedure? eq-pred) (procedure? lt-pred) x y) integer?))
  (subsigs (eq-pred (lambda (x y) boolean?)) (lt-pred (lambda (x y) boolean?)))
  (tags pure))
 ((name . "compare-by=/>")
  (signature lambda ((procedure? eq-pred) (procedure? gt-pred)) procedure?)
  (subsigs
   (eq-pred (lambda (x y) boolean?))
   (gt-pred (lambda (x y) boolean?))
   (return (lambda (x y) integer?)))
  (tags pure))
 ((name . "compare-by=/<")
  (signature lambda ((procedure? eq-pred) (procedure? gt-pred) x y) integer?)
  (subsigs (eq-pred (lambda (x y) boolean?)) (gt-pred (lambda (x y) boolean?)))
  (tags pure))
 ((name . "debug-compare")
  (signature lambda ((procedure? compare)) procedure?)
  (subsigs
   (compare (lambda (x y) integer?))
   (return (lambda (x y) integer?)))))
