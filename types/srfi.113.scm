(((name . "set")
  (signature lambda ((comparator? comparator) element ...) set?)
  (tags pure))
 ((name . "set-unfold")
  (signature
   lambda
   ((comparator? comparator)
    (procedure? stop?)
    (procedure? mapper)
    (procedure? successor)
    seed)
   set?)
  (subsigs
   (stop? (lambda (seed) boolean?))
   (mapper (lambda (seed) *))
   (successor (lambda (seed) *)))
  (tags pure))
 ((name . "set?") (signature lambda (obj) boolean?) (tags pure predicate))
 ((name . "set-contains?")
  (signature lambda ((set? set) element) boolean?)
  (tags pure))
 ((name . "set-empty?") (signature lambda ((set? set)) boolean?) (tags pure))
 ((name . "set-disjoint?")
  (signature lambda ((set? set1) (set? set2)) boolean?)
  (tags pure))
 ((name . "set-member")
  (signature lambda ((set? set) element default) *)
  (tags pure))
 ((name . "set-element-comparator")
  (signature lambda ((set? set)) comparator?)
  (tags pure))
 ((name . "set-adjoin")
  (signature lambda ((set? set) element ...) set?)
  (tags pure))
 ((name . "set-adjoin!") (signature lambda ((set? set) element ...) set?))
 ((name . "set-replace")
  (signature lambda ((set? set) element) set?)
  (tags pure))
 ((name . "set-replace!") (signature lambda ((set? set) element) set?))
 ((name . "set-delete")
  (signature lambda ((set? set) element ...) set?)
  (tags pure))
 ((name . "set-delete!") (signature lambda ((set? set) element ...) set?))
 ((name . "set-delete-all")
  (signature lambda ((set? set) (list? elements)) set?)
  (tags pure))
 ((name . "set-delete-all!")
  (signature lambda ((set? set) (list? elements)) set?))
 ((name . "set-search!")
  (signature
   lambda
   ((set? set) element (procedure? failure) (procedure? success))
   (values set? *))
  (subsigs
   (failure (lambda ((procedure? insert) (procedure? ignore)) *))
   (insert (lambda (obj) *))
   (ignore (lambda (obj) *))
   (success (lambda (element (procedure? update) (procedure? remove)) *))
   (update (lambda (new-element obj) *))
   (remove (lambda (obj) *))))
 ((name . "set-size") (signature lambda ((set? set)) integer?) (tags pure))
 ((name . "set-find")
  (signature lambda ((procedure? predicate) (set? set) (procedure? failure)) *)
  (subsigs (predicate (lambda (obj) boolean?)) (failure (lambda () *)))
  (tags pure))
 ((name . "set-count")
  (signature lambda ((procedure? predicate) (set? set)) integer?)
  (subsigs (predicate (lambda (obj) boolean?)))
  (tags pure))
 ((name . "set-any?")
  (signature lambda ((procedure? predicate) (set? set)) boolean?)
  (subsigs (predicate (lambda (obj) boolean?)))
  (tags pure))
 ((name . "set-every?")
  (signature lambda ((procedure? predicate) (set? set)) boolean?)
  (subsigs (predicate (lambda (obj) boolean?)))
  (tags pure))
 ((name . "set-map")
  (signature lambda ((comparator? comparator) (procedure? proc) (set? set)) *)
  (subsigs (proc (lambda (obj) *)))
  (tags pure))
 ((name . "set-for-each")
  (signature lambda ((procedure? proc) (set? set)) undefined)
  (subsigs (proc (lambda (obj) undefined))))
 ((name . "set-fold")
  (signature lambda ((procedure? proc) nil (set? set)) *)
  (subsigs (proc (lambda (obj state) *)))
  (tags pure))
 ((name . "set-filter")
  (signature lambda ((procedure? predicate) (set? set)) set?)
  (subsigs (predicate (lambda (obj) *)))
  (tags pure))
 ((name . "set-filter!")
  (signature lambda ((procedure? predicate) (set? set)) set?)
  (subsigs (predicate (lambda (obj) *))))
 ((name . "set-remove")
  (signature lambda ((procedure? predicate) (set? set)) set?)
  (subsigs (predicate (lambda (obj) *)))
  (tags pure))
 ((name . "set-remove!")
  (signature lambda ((procedure? predicate) (set? set)) set?)
  (subsigs (predicate (lambda (obj) *))))
 ((name . "set-partition")
  (signature lambda ((procedure? predicate) (set? set)) (values set? set?))
  (subsigs (predicate (lambda (obj) *)))
  (tags pure))
 ((name . "set-partition!")
  (signature lambda ((procedure? predicate) (set? set)) (values set? set?))
  (subsigs (predicate (lambda (obj) *))))
 ((name . "set-copy") (signature lambda ((set? set)) set?) (tags pure))
 ((name . "set->list") (signature lambda ((set? set)) list?))
 ((name . "list->set")
  (signature lambda ((comparator? comparator) (list? list)) set?)
  (tags pure))
 ((name . "list->set!") (signature lambda ((set? set) (list? list)) set?))
 ((name . "set=?")
  (signature lambda ((set? set1) (set? set2) ...) boolean?)
  (tags pure))
 ((name . "set<?")
  (signature lambda ((set? set1) (set? set2) ...) boolean?)
  (tags pure))
 ((name . "set>?")
  (signature lambda ((set? set1) (set? set2) ...) boolean?)
  (tags pure))
 ((name . "set<=?")
  (signature lambda ((set? set1) (set? set2) ...) boolean?)
  (tags pure))
 ((name . "set>=?")
  (signature lambda ((set? set1) (set? set2) ...) boolean?)
  (tags pure))
 ((name . "set-union")
  (signature lambda ((set? set1) (set? set2) ...) set?)
  (tags pure))
 ((name . "set-intersection")
  (signature lambda ((set? set1) (set? set2) ...) set?)
  (tags pure))
 ((name . "set-difference")
  (signature lambda ((set? set1) (set? set2) ...) set?)
  (tags pure))
 ((name . "set-xor")
  (signature lambda ((set? set1) (set? set2)) set?)
  (tags pure))
 ((name . "set-union!") (signature lambda ((set? set1) (set? set2) ...) set?))
 ((name . "set-intersection!")
  (signature lambda ((set? set1) (set? set2) ...) set?))
 ((name . "set-difference!")
  (signature lambda ((set? set1) (set? set2) ...) set?))
 ((name . "set-xor!") (signature lambda ((set? set1) (set? set2)) set?))
 ((name . "bag")
  (signature lambda ((comparator? comparator) element ...) bag?)
  (tags pure))
 ((name . "bag-unfold")
  (signature
   lambda
   ((comparator? comparator)
    (procedure? stop?)
    (procedure? mapper)
    (procedure? successor)
    seed)
   bag?)
  (subsigs
   (stop? (lambda (seed) boolean?))
   (mapper (lambda (seed) *))
   (successor (lambda (seed) *)))
  (tags pure))
 ((name . "bag?") (signature lambda (obj) boolean?) (tags pure predicate))
 ((name . "bag-contains?")
  (signature lambda ((bag? bag) element) boolean?)
  (tags pure))
 ((name . "bag-empty?") (signature lambda ((bag? bag)) boolean?) (tags pure))
 ((name . "bag-disjoint?")
  (signature lambda ((bag? bag1) (bag? bag2)) boolean?)
  (tags pure))
 ((name . "bag-member")
  (signature lambda ((bag? bag) element default) *)
  (tags pure))
 ((name . "bag-element-comparator")
  (signature lambda ((bag? bag)) comparator?)
  (tags pure))
 ((name . "bag-adjoin")
  (signature lambda ((bag? bag) element ...) bag?)
  (tags pure))
 ((name . "bag-adjoin!") (signature lambda ((bag? bag) element ...) bag?))
 ((name . "bag-replace")
  (signature lambda ((bag? bag) element) bag?)
  (tags pure))
 ((name . "bag-replace!") (signature lambda ((bag? bag) element) bag?))
 ((name . "bag-delete")
  (signature lambda ((bag? bag) element ...) bag?)
  (tags pure))
 ((name . "bag-delete!") (signature lambda ((bag? bag) element ...) bag?))
 ((name . "bag-delete-all")
  (signature lambda ((bag? bag) (list? elements)) bag?)
  (tags pure))
 ((name . "bag-delete-all!")
  (signature lambda ((bag? bag) (list? elements)) bag?))
 ((name . "bag-search!")
  (signature
   lambda
   ((bag? bag) element (procedure? failure) (procedure? success))
   (values bag? *))
  (subsigs
   (failure (lambda ((procedure? insert) (procedure? ignore)) *))
   (insert (lambda (obj) *))
   (ignore (lambda (obj) *))
   (success (lambda (element (procedure? update) (procedure? remove)) *))
   (update (lambda (new-element obj) *))
   (remove (lambda (obj) *))))
 ((name . "bag-size") (signature lambda ((bag? bag)) integer?) (tags pure))
 ((name . "bag-find")
  (signature lambda ((procedure? predicate) (bag? bag) (procedure? failure)) *)
  (subsigs (predicate (lambda (obj) boolean?)) (failure (lambda () *)))
  (tags pure))
 ((name . "bag-count")
  (signature lambda ((procedure? predicate) (bag? bag)) integer?)
  (subsigs (predicate (lambda (obj) boolean?)))
  (tags pure))
 ((name . "bag-any?")
  (signature lambda ((procedure? predicate) (bag? bag)) boolean?)
  (subsigs (predicate (lambda (obj) boolean?)))
  (tags pure))
 ((name . "bag-every?")
  (signature lambda ((procedure? predicate) (bag? bag)) boolean?)
  (subsigs (predicate (lambda (obj) boolean?)))
  (tags pure))
 ((name . "bag-map")
  (signature lambda ((comparator? comparator) (procedure? proc) (bag? bag)) *)
  (subsigs (proc (lambda (obj) *)))
  (tags pure))
 ((name . "bag-for-each")
  (signature lambda ((procedure? proc) (bag? bag)) undefined)
  (subsigs (proc (lambda (obj) undefined))))
 ((name . "bag-fold")
  (signature lambda ((procedure? proc) nil (bag? bag)) *)
  (subsigs (proc (lambda (obj state) *)))
  (tags pure))
 ((name . "bag-filter")
  (signature lambda ((procedure? predicate) (bag? bag)) bag?)
  (subsigs (predicate (lambda (obj) *)))
  (tags pure))
 ((name . "bag-filter!")
  (signature lambda ((procedure? predicate) (bag? bag)) bag?)
  (subsigs (predicate (lambda (obj) *))))
 ((name . "bag-remove")
  (signature lambda ((procedure? predicate) (bag? bag)) bag?)
  (subsigs (predicate (lambda (obj) *)))
  (tags pure))
 ((name . "bag-remove!")
  (signature lambda ((procedure? predicate) (bag? bag)) bag?)
  (subsigs (predicate (lambda (obj) *))))
 ((name . "bag-partition")
  (signature lambda ((procedure? predicate) (bag? bag)) (values bag? bag?))
  (subsigs (predicate (lambda (obj) *)))
  (tags pure))
 ((name . "bag-partition!")
  (signature lambda ((procedure? predicate) (bag? bag)) (values bag? bag?))
  (subsigs (predicate (lambda (obj) *))))
 ((name . "bag-copy") (signature lambda ((bag? bag)) bag?) (tags pure))
 ((name . "bag->list") (signature lambda ((bag? bag)) list?))
 ((name . "list->bag")
  (signature lambda ((comparator? comparator) (list? list)) bag?)
  (tags pure))
 ((name . "list->bag!") (signature lambda ((bag? bag) (list? list)) bag?))
 ((name . "bag=?")
  (signature lambda ((bag? bag1) (bag? bag2) ...) boolean?)
  (tags pure))
 ((name . "bag<?")
  (signature lambda ((bag? bag1) (bag? bag2) ...) boolean?)
  (tags pure))
 ((name . "bag>?")
  (signature lambda ((bag? bag1) (bag? bag2) ...) boolean?)
  (tags pure))
 ((name . "bag<=?")
  (signature lambda ((bag? bag1) (bag? bag2) ...) boolean?)
  (tags pure))
 ((name . "bag>=?")
  (signature lambda ((bag? bag1) (bag? bag2) ...) boolean?)
  (tags pure))
 ((name . "bag-union")
  (signature lambda ((bag? bag1) (bag? bag2) ...) bag?)
  (tags pure))
 ((name . "bag-intersection")
  (signature lambda ((bag? bag1) (bag? bag2) ...) bag?)
  (tags pure))
 ((name . "bag-difference")
  (signature lambda ((bag? bag1) (bag? bag2) ...) bag?)
  (tags pure))
 ((name . "bag-xor")
  (signature lambda ((bag? bag1) (bag? bag2)) bag?)
  (tags pure))
 ((name . "bag-union!") (signature lambda ((bag? bag1) (bag? bag2) ...) bag?))
 ((name . "bag-intersection!")
  (signature lambda ((bag? bag1) (bag? bag2) ...) bag?))
 ((name . "bag-difference!")
  (signature lambda ((bag? bag1) (bag? bag2) ...) bag?))
 ((name . "bag-xor!") (signature lambda ((bag? bag1) (bag? bag2)) bag?))
 ((name . "bag-sum")
  (signature lambda ((bag? bag1) (bag? bag2) ...) bag?)
  (tags pure))
 ((name . "bag-sum!") (signature lambda ((bag? bag1) (bag? bag2) ...) bag?))
 ((name . "bag-product")
  (signature lambda ((integer? n) (bag? bag)) bag?)
  (tags pure))
 ((name . "bag-product!") (signature lambda ((integer? n) (bag? bag)) bag?))
 ((name . "bag-unique-size")
  (signature lambda ((bag? bag)) integer?)
  (tags pure))
 ((name . "bag-element-count")
  (signature lambda ((bag? bag) element) integer?)
  (tags pure))
 ((name . "bag-for-each-unique")
  (signature lambda ((procedure? proc) (bag? bag)) undefined)
  (subsigs (proc (lambda (obj) undefined))))
 ((name . "bag-fold-unique")
  (signature lambda ((procedure? proc) nil (bag? bag)) *)
  (subsigs (proc (lambda (obj state) *)))
  (tags pure))
 ((name . "bag-increment!") (signature lambda ((bag? bag) element count) bag?))
 ((name . "bag-decrement!") (signature lambda ((bag? bag) element count) bag?))
 ((name . "bag->set") (signature lambda ((bag? bag)) set?) (tags pure))
 ((name . "set->bag") (signature lambda ((set? set)) bag?) (tags pure))
 ((name . "set->bag!") (signature lambda ((set? set)) bag?))
 ((name . "bag->alist") (signature lambda ((bag? bag)) list?))
 ((name . "alist->bag")
  (signature lambda ((comparator? comparator) (list? alist)) bag?)
  (tags pure))
 ((name . "set-comparator") (signature value comparator?))
 ((name . "bag-comparator") (signature value comparator?)))
