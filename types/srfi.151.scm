(((name . "bitwise-not")
  (signature lambda ((integer? i)) integer?)
  (tags pure))
 ((name . "bitwise-and")
  (signature lambda ((integer? i) ...) integer?)
  (tags pure))
 ((name . "bitwise-ior")
  (signature lambda ((integer? i) ...) integer?)
  (tags pure))
 ((name . "bitwise-xor")
  (signature lambda ((integer? i) ...) integer?)
  (tags pure))
 ((name . "bitwise-eqv")
  (signature lambda ((integer? i) ...) integer?)
  (tags pure))
 ((name . "bitwise-nand")
  (signature lambda ((integer? i) (integer? j)) integer?)
  (tags pure))
 ((name . "bitwise-nor")
  (signature lambda ((integer? i) (integer? j)) integer?)
  (tags pure))
 ((name . "bitwise-andc1")
  (signature lambda ((integer? i) (integer? j)) integer?)
  (tags pure))
 ((name . "bitwise-andc2")
  (signature lambda ((integer? i) (integer? j)) integer?)
  (tags pure))
 ((name . "bitwise-orc1")
  (signature lambda ((integer? i) (integer? j)) integer?)
  (tags pure))
 ((name . "bitwise-orc2")
  (signature lambda ((integer? i) (integer? j)) integer?)
  (tags pure))
 ((name . "arithmetic-shift")
  (signature lambda ((integer? i) (integer? count)) integer?)
  (tags pure))
 ((name . "bit-count") (signature lambda ((integer? i)) integer?) (tags pure))
 ((name . "integer-length")
  (signature lambda ((integer? i)) integer?)
  (tags pure))
 ((name . "bitwise-if")
  (signature lambda ((integer? mask) (integer? i) (integer? j)) integer?)
  (tags pure))
 ((name . "bit-set?")
  (signature lambda ((integer? index) (integer? i)) boolean?)
  (tags pure))
 ((name . "copy-bit")
  (signature
   lambda
   ((integer? index) (integer? i) (boolean? boolean))
   integer?)
  (tags pure))
 ((name . "bit-swap")
  (signature
   lambda
   ((integer? index1) (integer? index2) (integer? i))
   integer?)
  (tags pure))
 ((name . "any-bit-set?")
  (signature lambda ((integer? test-bits) (integer? i)) boolean?)
  (tags pure))
 ((name . "every-bit-set?")
  (signature lambda ((integer? test-bits) (integer? i)) boolean?)
  (tags pure))
 ((name . "first-set-bit")
  (signature lambda ((integer? i)) integer?)
  (tags pure))
 ((name . "bit-field")
  (signature lambda ((integer? i) (integer? start) (integer? end)) integer?)
  (tags pure))
 ((name . "bit-field-any?")
  (signature lambda ((integer? i) (integer? start) (integer? end)) boolean?)
  (tags pure))
 ((name . "bit-field-every?")
  (signature lambda ((integer? i) (integer? start) (integer? end)) boolean?)
  (tags pure))
 ((name . "bit-field-clear")
  (signature lambda ((integer? i) (integer? start) (integer? end)) integer?)
  (tags pure))
 ((name . "bit-field-set")
  (signature lambda ((integer? i) (integer? start) (integer? end)) integer?)
  (tags pure))
 ((name . "bit-field-replace")
  (signature
   lambda
   ((integer? dest) (integer? source) (integer? start) (integer? end))
   integer?)
  (tags pure))
 ((name . "bit-field-replace-same")
  (signature
   lambda
   ((integer? dest) (integer? source) (integer? start) (integer? end))
   integer?)
  (tags pure))
 ((name . "bit-field-rotate")
  (signature
   lambda
   ((integer? i) (integer? count) (integer? start) (integer? end))
   integer?)
  (tags pure))
 ((name . "bit-field-reverse")
  (signature lambda ((integer? i) (integer? start) (integer? end)) integer?)
  (tags pure))
 ((name . "bits->list") (signature lambda ((integer? i)) list?) (tags pure))
 ((name . "bits->list")
  (signature lambda ((integer? i) (integer? len)) list?)
  (tags pure))
 ((name . "bits->vector")
  (signature lambda ((integer? i)) vector?)
  (tags pure))
 ((name . "bits->vector")
  (signature lambda ((integer? i) (integer? len)) vector?)
  (tags pure))
 ((name . "list->bits") (signature lambda ((list? list)) integer?) (tags pure))
 ((name . "vector->bits")
  (signature lambda ((vector? vector)) integer?)
  (tags pure))
 ((name . "bits")
  (signature lambda ((boolean? bool) ...) integer?)
  (tags pure))
 ((name . "bitwise-fold")
  (signature lambda ((procedure? proc) seed (integer? i)) *)
  (subsigs (proc (lambda ((boolean? bit) state) *)))
  (tags pure))
 ((name . "bitwise-for-each")
  (signature lambda ((procedure? proc) (integer? i)) undefined)
  (subsigs (proc (lambda ((boolean? bit)) undefined))))
 ((name . "bitwise-unfold")
  (signature
   lambda
   ((procedure? stop?) (procedure? mapper) (procedure? successor) seed)
   integer?)
  (subsigs
   (stop? (lambda (seed) boolean?))
   (mapper (lambda (seed) boolean?))
   (successor (lambda (seed) *)))
  (tags pure))
 ((name . "make-bitwise-generator")
  (signature lambda ((integer? i)) procedure?)
  (subsigs (return (lambda () boolean?)))))
