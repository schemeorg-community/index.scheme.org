(((name . "make-hash-table")
  (signature lambda ((procedure? equality-predicate) arg ...) hash-table?)
  (subsigs (equality-predicate (lambda (a b) boolean?)))
  (tags pure))
 ((name . "make-hash-table")
  (signature
   lambda
   ((procedure? equality-predicate) (procedure? hash-function) arg ...)
   hash-table?)
  (subsigs
   (equality-predicate (lambda (a b) boolean?))
   (hash-function (lambda (obj) integer?)))
  (tags pure))
 ((name . "hash-table?")
  (signature lambda (obj) boolean?)
  (tags pure predicate))
 ((name . "alist->hash-table")
  (signature
   lambda
   ((list? alist) (comparator? comparator) arg ...)
   hash-table?)
  (tags pure))
 ((name . "hash-table-equivalence-function")
  (signature lambda ((hash-table? hash-table)) procedure?)
  (subsigs (return (lambda (a b) boolean?)))
  (tags pure))
 ((name . "hash-table-hash-function")
  (signature lambda ((hash-table? hash-table)) procedure?)
  (subsigs (return (lambda (obj) integer?)))
  (tags pure))
 ((name . "hash-table-ref")
  (signature lambda ((hash-table? hash-table) key) *)
  (tags pure))
 ((name . "hash-table-ref")
  (signature lambda ((hash-table? hash-table) key (procedure? failure)) *)
  (subsigs (failure (lambda () *)))
  (tags pure))
 ((name . "hash-table-ref/default")
  (signature lambda ((hash-table? hash-table) key default) *)
  (tags pure))
 ((name . "hash-table-set!")
  (signature lambda ((hash-table? hash-table) key1 value1 ...) undefined))
 ((name . "hash-table-delete!")
  (signature lambda ((hash-table? hash-table) key ...) undefined))
 ((name . "hash-table-exists?")
  (signature lambda ((hash-table? hash-table) key) boolean?)
  (tags pure))
 ((name . "hash-table-update!")
  (signature
   lambda
   ((hash-table? hash-table) key (procedure? updater))
   undefined)
  (subsigs (updated (lambda (value) *))))
 ((name . "hash-table-update!")
  (signature
   lambda
   ((hash-table? hash-table) key (procedure? updater) (procedure? failure))
   undefined)
  (subsigs (updater (lambda (value) *)) (failure (lambda () *))))
 ((name . "hash-table-size")
  (signature lambda ((hash-table? hash-table)) integer?)
  (tags pure))
 ((name . "hash-table-keys")
  (signature lambda ((hash-table? hash-table)) list?)
  (tags pure))
 ((name . "hash-table-values")
  (signature lambda ((hash-table? hash-table)) list?)
  (tags pure))
 ((name . "hash-table-walk")
  (signature lambda ((hash-table? hash-table) (procedure? proc)) undefined)
  (subsigs (proc (lambda (key value) undefined))))
 ((name . "hash-table-fold")
  (signature lambda ((hash-table? hash-table) (procedure? proc) seed) *)
  (subsigs (proc (lambda (key value state) *)))
  (tags pure))
 ((name . "hash-table->alist")
  (signature lambda ((hash-table? hash-table)) list?))
 ((name . "hash-table-copy")
  (signature lambda ((hash-table? hash-table)) hash-table?)
  (tags pure))
 ((name . "hash-table-merge!")
  (signature
   lambda
   ((hash-table? hash-table1) (hash-table? hash-table2))
   hash-table?))
 ((name . "hash") (signature lambda (obj) integer?))
 ((name . "hash") (signature lambda (obj arg) integer?))
 ((name . "string-hash")
  (signature lambda ((string? str)) integer?)
  (tags pure))
 ((name . "string-hash")
  (signature lambda ((string? str) arg) integer?)
  (tags pure))
 ((name . "string-ci-hash")
  (signature lambda ((string? str)) integer?)
  (tags pure))
 ((name . "string-ci-hash")
  (signature lambda ((string? str) arg) integer?)
  (tags pure))
 ((name . "hash-by-identity") (signature lambda (obj) integer?) (tags pure))
 ((name . "hash-by-identity")
  (signature lambda (obj arg) integer?)
  (tags pure)))
